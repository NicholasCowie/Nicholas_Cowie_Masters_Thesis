
// Code generated by stanc v2.22.1
#include <stan/model/model_header.hpp>
namespace inference_model_linear_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 118, column 2 to column 33)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 119, column 2 to column 59)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 120, column 2 to column 63)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 121, column 2 to column 62)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 124, column 2 to column 24)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 125, column 2 to column 44)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 126, column 2 to column 40)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 127, column 2 to column 71)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 129, column 4 to column 51)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 130, column 4 to line 131, column 78)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 132, column 4 to line 141, column 42)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 142, column 4 to column 52)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 143, column 4 to column 84)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 128, column 27 to line 144, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 128, column 2 to line 144, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 166, column 2 to column 39)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 167, column 2 to column 40)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 168, column 2 to column 39)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 169, column 2 to column 57)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 172, column 4 to column 127)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 171, column 33 to line 173, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 171, column 2 to line 173, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 176, column 4 to column 102)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 175, column 33 to line 177, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 175, column 2 to line 177, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 181, column 4 to column 97)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 180, column 33 to line 182, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 180, column 2 to line 182, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 184, column 4 to column 113)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 183, column 36 to line 185, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 183, column 2 to line 185, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 187, column 4 to column 91)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 186, column 33 to line 188, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 186, column 2 to line 188, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 147, column 2 to column 100)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 148, column 2 to column 92)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 150, column 4 to column 92)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 151, column 4 to column 89)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 149, column 27 to line 152, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 149, column 2 to line 152, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 155, column 6 to column 106)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 154, column 35 to line 156, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 154, column 4 to line 156, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 158, column 6 to column 122)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 157, column 38 to line 159, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 157, column 4 to line 159, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 161, column 6 to column 100)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 160, column 35 to line 162, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 160, column 4 to line 162, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 153, column 22 to line 163, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 153, column 2 to line 163, column 3)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 66, column 2 to column 21)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 67, column 2 to column 28)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 68, column 2 to column 36)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 69, column 2 to column 26)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 70, column 2 to column 24)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 71, column 2 to column 28)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 72, column 2 to column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 73, column 2 to column 36)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 74, column 2 to column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 75, column 2 to column 28)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 77, column 2 to column 59)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 78, column 2 to column 63)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 79, column 2 to column 71)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 80, column 2 to column 60)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 81, column 2 to column 35)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 82, column 2 to column 49)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 83, column 2 to column 71)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 84, column 2 to column 67)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 85, column 2 to column 35)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 86, column 2 to column 49)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 87, column 2 to column 72)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 88, column 2 to column 64)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 89, column 2 to column 36)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 90, column 2 to column 50)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 92, column 2 to column 43)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 93, column 2 to column 52)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 94, column 2 to column 60)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 95, column 2 to column 71)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 96, column 2 to column 56)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 97, column 2 to column 67)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 98, column 2 to column 48)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 99, column 2 to column 59)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 101, column 2 to column 48)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 102, column 2 to column 77)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 104, column 2 to column 60)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 105, column 2 to column 12)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 106, column 2 to column 12)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 107, column 2 to column 12)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 108, column 2 to column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 109, column 2 to column 26)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 112, column 2 to column 13)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 113, column 2 to column 12)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 114, column 2 to column 38)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 17, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 18, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 19, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 12, column 64, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 26, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 27, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 39, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 25, column 27, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 46, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 47, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 54, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 45, column 28, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 61, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 62, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 71, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 60, column 23, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 78, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 79, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 98, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 77, column 28, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 101, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 100, column 52, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 104, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 103, column 37, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 107, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/big_k_rate_equations.stan', line 106, column 23, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 2, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 13, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 12, column 55, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 16, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 15, column 73, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 19, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 18, column 72, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 22, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 21, column 81, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 25, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 24, column 81, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 28, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 27, column 76, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 31, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 30, column 92, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 34, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 33, column 76, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 39, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/haldane_relationships.stan', line 38, column 42, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 3, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 7, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 9, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 11, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 12, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 6, column 50, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 15, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 16, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 14, column 86, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 23, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 24, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 31, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 22, column 50, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 38, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 39, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 51, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 37, column 28, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 58, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 59, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 78, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 57, column 28, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 81, column 2, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/allostery.stan', line 80, column 74, included from\n'/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 4, column 0)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 6, column 2 to column 22)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 7, column 2 to line 12, column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 14, column 0 to line 16, column 20)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 19, column 0 to column 19)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 20, column 2 to line 25, column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 27, column 0 to line 29, column 20)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 32, column 0 to column 31)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 35, column 2 to line 40, column 34)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 42, column 0 to line 44, column 20)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 47, column 0 to column 19)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 48, column 2 to column 94)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 49, column 2 to column 94)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 50, column 2 to line 54, column 5)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 5, column 39 to line 55, column 1)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 57, column 2 to column 38)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 58, column 2 to line 61, column 4)",
                                                      " (in '/Users/nicow/Maud/src/maud/stan_code/autogen/inference_model_linear.stan', line 56, column 66 to line 62, column 1)"};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
uniuni(const T0__& A, const T1__& P, const T2__& V1, const T3__& V2,
       const T4__& Ka, const T5__& Keq, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 95;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 95;
    num = ((V1 * V2) * (A - (P / Keq)));
    local_scalar_t__ denom;
    
    current_statement__ = 96;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 96;
    denom = (((Ka * V2) + (V2 * A)) + ((V1 * P) / Keq));
    current_statement__ = 97;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct uniuni_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const T0__& A, const T1__& P, const T2__& V1, const T3__& V2,
           const T4__& Ka, const T5__& Keq, std::ostream* pstream__)  const 
{
return uniuni(A, P, V1, V2, Ka, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
ordered_bibi(const T0__& A, const T1__& B, const T2__& P, const T3__& Q,
             const T4__& V1, const T5__& V2, const T6__& Ka, const T7__& Kb,
             const T8__& Kp, const T9__& Kq, const T10__& Kia,
             const T11__& Kib, const T12__& Kip, const T13__& Kiq,
             const T14__& Keq, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__,
          T12__,
          T13__,
          T14__>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 99;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 99;
    num = ((V1 * V2) * ((A * B) - ((P * Q) / Keq)));
    local_scalar_t__ denom;
    
    current_statement__ = 100;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 100;
    denom = ((((((((((((Kia * Kb) * V2) + ((Kb * V2) * A)) + ((Ka * V2) * B))
                     + ((V2 * A) * B)) + (((Kq * V1) * P) / Keq)) +
                   (((Kp * V1) * Q) / Keq)) + (((V1 * P) * Q) / Keq)) +
                 ((((Kq * V1) * A) * P) / (Kia * Keq))) +
                ((((Ka * V2) * B) * Q) / Kiq)) +
               ((((V2 * A) * B) * P) / Kip)) +
              ((((V1 * B) * P) * Q) / (Kib * Keq)));
    current_statement__ = 101;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ordered_bibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
operator()(const T0__& A, const T1__& B, const T2__& P, const T3__& Q,
           const T4__& V1, const T5__& V2, const T6__& Ka, const T7__& Kb,
           const T8__& Kp, const T9__& Kq, const T10__& Kia,
           const T11__& Kib, const T12__& Kip, const T13__& Kiq,
           const T14__& Keq, std::ostream* pstream__)  const 
{
return ordered_bibi(A, B, P, Q, V1, V2, Ka, Kb, Kp, Kq, Kia, Kib, Kip, Kiq,
         Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
ordered_unibi(const T0__& A, const T1__& P, const T2__& Q, const T3__& V1,
              const T4__& V2, const T5__& Ka, const T6__& Kp, const T7__& Kq,
              const T8__& Kia, const T9__& Kip, const T10__& Kiq,
              const T11__& Keq, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 103;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 103;
    num = ((V1 * V2) * (A - ((P * Q) / Keq)));
    local_scalar_t__ denom;
    
    current_statement__ = 104;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 104;
    denom = ((((((Ka * V2) + (V2 * A)) + (((Kq * V1) * P) / Keq)) +
                (((Kp * V1) * Q) / Keq)) + (((V1 * P) * Q) / Keq)) +
              (((V2 * A) * P) / Kip));
    current_statement__ = 105;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ordered_unibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
operator()(const T0__& A, const T1__& P, const T2__& Q, const T3__& V1,
           const T4__& V2, const T5__& Ka, const T6__& Kp, const T7__& Kq,
           const T8__& Kia, const T9__& Kip, const T10__& Kiq,
           const T11__& Keq, std::ostream* pstream__)  const 
{
return ordered_unibi(A, P, Q, V1, V2, Ka, Kp, Kq, Kia, Kip, Kiq, Keq,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
pingpong(const T0__& A, const T1__& B, const T2__& P, const T3__& Q,
         const T4__& V1, const T5__& V2, const T6__& Ka, const T7__& Kb,
         const T8__& Kp, const T9__& Kq, const T10__& Kia, const T11__& Kib,
         const T12__& Kip, const T13__& Kiq, const T14__& Keq,
         std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__,
          T12__,
          T13__,
          T14__>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 107;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 107;
    num = ((V1 * V2) * ((A * B) - ((P * Q) / Keq)));
    local_scalar_t__ denom;
    
    current_statement__ = 108;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 108;
    denom = (((((((((Kb * V2) * A) + ((Ka * V2) * B)) + ((V2 * A) * B)) +
                  (((Kq * V1) * P) / Keq)) + (((Kp * V1) * Q) / Keq)) +
                (((V1 * P) * Q) / Keq)) +
               ((((Kq * V1) * A) * P) / (Kia * Keq))) +
              ((((Ka * V2) * B) * Q) / Kiq));
    current_statement__ = 109;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct pingpong_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
operator()(const T0__& A, const T1__& B, const T2__& P, const T3__& Q,
           const T4__& V1, const T5__& V2, const T6__& Ka, const T7__& Kb,
           const T8__& Kp, const T9__& Kq, const T10__& Kia,
           const T11__& Kib, const T12__& Kip, const T13__& Kiq,
           const T14__& Keq, std::ostream* pstream__)  const 
{
return pingpong(A, B, P, Q, V1, V2, Ka, Kb, Kp, Kq, Kia, Kib, Kip, Kiq, Keq,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__, typename T16__,
typename T17__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__, typename boost::math::tools::promote_args<T15__, T16__,
T17__>::type>::type>::type>::type
ordered_terbi(const T0__& A, const T1__& B, const T2__& C, const T3__& P,
              const T4__& Q, const T5__& V1, const T6__& V2, const T7__& Ka,
              const T8__& Kb, const T9__& Kc, const T10__& Kp,
              const T11__& Kq, const T12__& Kia, const T13__& Kib,
              const T14__& Kic, const T15__& Kip, const T16__& Kiq,
              const T17__& Keq, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__,
          T12__,
          T13__,
          T14__, typename boost::math::tools::promote_args<T15__,
          T16__,
          T17__>::type>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 111;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 111;
    num = ((V1 * V2) * (((A * B) * C) - ((P * Q) / Keq)));
    local_scalar_t__ denom;
    
    current_statement__ = 112;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 112;
    denom = ((((((((((((((((((((Kia * Kib) * Kc) * V2) +
                              (((Kib * Kc) * V2) * A)) +
                             (((Kia * Kb) * V2) * C)) +
                            (((Kc * V2) * A) * B)) + (((Kb * V2) * A) * C)) +
                          (((Ka * V2) * B) * C)) + (((V2 * A) * B) * C)) +
                        (((Kp * V1) * Q) / Keq)) + (((Kq * V1) * P) / Keq)) +
                      (((V1 * P) * Q) / Keq)) +
                     ((((Kq * V1) * A) * P) / (Kia * Keq))) +
                    (((((Kia * Kb) * V2) * C) * Q) / Kiq)) +
                   (((((Kq * V1) * A) * B) * P) / ((Kia * Kib) * Keq))) +
                  (((((Ka * V2) * B) * C) * Q) / Kiq)) +
                 ((((((Ka * Kic) * V2) * B) * P) * Q) / (Kip * Kiq))) +
                ((((((Kia * Kb) * V2) * C) * P) * Q) / (Kip * Kiq))) +
               ((((((Kq * V1) * A) * B) * C) * P) /
                 (((Kia * Kib) * Kic) * Keq))) +
              ((((((Ka * V2) * B) * C) * P) * Q) / (Kip * Kiq)));
    current_statement__ = 113;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ordered_terbi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__, typename T16__,
typename T17__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__, typename boost::math::tools::promote_args<T15__, T16__,
T17__>::type>::type>::type>::type
operator()(const T0__& A, const T1__& B, const T2__& C, const T3__& P,
           const T4__& Q, const T5__& V1, const T6__& V2, const T7__& Ka,
           const T8__& Kb, const T9__& Kc, const T10__& Kp, const T11__& Kq,
           const T12__& Kia, const T13__& Kib, const T14__& Kic,
           const T15__& Kip, const T16__& Kiq, const T17__& Keq,
           std::ostream* pstream__)  const 
{
return ordered_terbi(A, B, C, P, Q, V1, V2, Ka, Kb, Kc, Kp, Kq, Kia, Kib,
         Kic, Kip, Kiq, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
modular_rate_law(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
                 std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 115;
    return (Tr / (Dr + Dr_reg));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct modular_rate_law_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
           std::ostream* pstream__)  const 
{
return modular_rate_law(Tr, Dr, Dr_reg, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
irr_mass_action(const T0__& A, const T1__& V1, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 117;
    return (A * V1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct irr_mass_action_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& A, const T1__& V1, std::ostream* pstream__)  const 
{
return irr_mass_action(A, V1, pstream__);
}
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
fixed_flux(const T0__& f, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 119;
    return f;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct fixed_flux_functor__ {
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& f, std::ostream* pstream__)  const 
{
return fixed_flux(f, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type
get_Kp_uniuni(const T0__& Keq, const T1__& V1, const T2__& Ka,
              const T3__& V2, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 121;
    return (((Keq * V2) * Ka) / V1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kp_uniuni_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type
operator()(const T0__& Keq, const T1__& V1, const T2__& Ka, const T3__& V2,
           std::ostream* pstream__)  const 
{
return get_Kp_uniuni(Keq, V1, Ka, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
get_Kip_ordered_unibi(const T0__& Keq, const T1__& Kia, const T2__& Kq,
                      const T3__& V1, const T4__& V2, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 123;
    return (((Keq * Kia) * V2) / (Kq * V1));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kip_ordered_unibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
operator()(const T0__& Keq, const T1__& Kia, const T2__& Kq, const T3__& V1,
           const T4__& V2, std::ostream* pstream__)  const 
{
return get_Kip_ordered_unibi(Keq, Kia, Kq, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
get_Kiq_ordered_unibi(const T0__& Keq, const T1__& Ka, const T2__& Kp,
                      const T3__& V1, const T4__& V2, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 125;
    return (((Keq * V2) * Ka) / (V1 * Kp));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kiq_ordered_unibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
operator()(const T0__& Keq, const T1__& Ka, const T2__& Kp, const T3__& V1,
           const T4__& V2, std::ostream* pstream__)  const 
{
return get_Kiq_ordered_unibi(Keq, Ka, Kp, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
get_Kip_ordered_bibi(const T0__& Keq, const T1__& Ka, const T2__& Kq,
                     const T3__& Kib, const T4__& V1, const T5__& V2,
                     std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 127;
    return ((((Ka * Keq) * Kib) * pow(V2, 2)) / (Kq * pow(V1, 2)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kip_ordered_bibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const T0__& Keq, const T1__& Ka, const T2__& Kq, const T3__& Kib,
           const T4__& V1, const T5__& V2, std::ostream* pstream__)  const 
{
return get_Kip_ordered_bibi(Keq, Ka, Kq, Kib, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
get_Kia_ordered_bibi(const T0__& Keq, const T1__& Kb, const T2__& Kp,
                     const T3__& Kiq, const T4__& V1, const T5__& V2,
                     std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 129;
    return (((V1 * Kp) * Kiq) / ((V2 * Keq) * Kb));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kia_ordered_bibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const T0__& Keq, const T1__& Kb, const T2__& Kp, const T3__& Kiq,
           const T4__& V1, const T5__& V2, std::ostream* pstream__)  const 
{
return get_Kia_ordered_bibi(Keq, Kb, Kp, Kiq, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
get_Kp_ping_pong(const T0__& Keq, const T1__& Ka, const T2__& Kb,
                 const T3__& Kq, const T4__& V1, const T5__& V2,
                 std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 131;
    return ((((pow((V2 / V1), 2) * Keq) * Ka) * Kb) / Kq);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kp_ping_pong_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const T0__& Keq, const T1__& Ka, const T2__& Kb, const T3__& Kq,
           const T4__& V1, const T5__& V2, std::ostream* pstream__)  const 
{
return get_Kp_ping_pong(Keq, Ka, Kb, Kq, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type
get_Kp_ordered_terbi(const T0__& Keq, const T1__& Kc, const T2__& Kia,
                     const T3__& Kib, const T4__& Kiq, const T5__& V1,
                     const T6__& V2, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 133;
    return (((((Keq * V2) * Kia) * Kib) * Kc) / (V1 * Kiq));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kp_ordered_terbi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type
operator()(const T0__& Keq, const T1__& Kc, const T2__& Kia, const T3__& Kib,
           const T4__& Kiq, const T5__& V1, const T6__& V2,
           std::ostream* pstream__)  const 
{
return get_Kp_ordered_terbi(Keq, Kc, Kia, Kib, Kiq, V1, V2, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
get_Kip_ordered_terbi(const T0__& Keq, const T1__& Kia, const T2__& Kib,
                      const T3__& Kic, const T4__& Kiq,
                      std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 135;
    return ((((Keq * Kia) * Kib) * Kic) / Kiq);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Kip_ordered_terbi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
operator()(const T0__& Keq, const T1__& Kia, const T2__& Kib,
           const T3__& Kic, const T4__& Kiq, std::ostream* pstream__)  const 
{
return get_Kip_ordered_terbi(Keq, Kia, Kib, Kic, Kiq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
get_Keq(const T0__& delta_g, const T1__& T, const T2__& R,
        std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 137;
    return stan::math::exp((delta_g / (-R * T)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Keq_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& delta_g, const T1__& T, const T2__& R,
           std::ostream* pstream__)  const 
{
return get_Keq(delta_g, T, R, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
get_regulatory_effect(const std::vector<T0__>& activator_concentration,
                      const std::vector<T1__>& inhibitor_concentration,
                      const T2__& free_enzyme_ratio,
                      const std::vector<T3__>& dissociation_constant_r,
                      const std::vector<T4__>& dissociation_constant_t,
                      const T5__& transfer_constant, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ Q_num;
    
    current_statement__ = 139;
    Q_num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 139;
    Q_num = (logical_eq(size(inhibitor_concentration), 0) ?
               stan::math::promote_scalar<local_scalar_t__>(1) :
               stan::math::promote_scalar<local_scalar_t__>((1 +
                                                              sum(
                                                                elt_divide(
                                                                  to_vector(
                                                                    inhibitor_concentration),
                                                                  to_vector(
                                                                    dissociation_constant_t))))));
    local_scalar_t__ Q_denom;
    
    current_statement__ = 140;
    Q_denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 140;
    Q_denom = (logical_eq(size(activator_concentration), 0) ?
                 stan::math::promote_scalar<local_scalar_t__>(1) :
                 stan::math::promote_scalar<local_scalar_t__>((1 +
                                                                sum(
                                                                  elt_divide(
                                                                    to_vector(
                                                                    activator_concentration),
                                                                    to_vector(
                                                                    dissociation_constant_r))))));
    local_scalar_t__ Q;
    
    current_statement__ = 141;
    Q = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 141;
    Q = (((transfer_constant * free_enzyme_ratio) * Q_num) / Q_denom);
    current_statement__ = 142;
    return inv((1 + Q));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_regulatory_effect_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const std::vector<T0__>& activator_concentration,
           const std::vector<T1__>& inhibitor_concentration,
           const T2__& free_enzyme_ratio,
           const std::vector<T3__>& dissociation_constant_r,
           const std::vector<T4__>& dissociation_constant_t,
           const T5__& transfer_constant, std::ostream* pstream__)  const 
{
return get_regulatory_effect(activator_concentration,
         inhibitor_concentration, free_enzyme_ratio, dissociation_constant_r,
         dissociation_constant_t, transfer_constant, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
get_free_enzyme_ratio_uniuni(const T0__& A, const T1__& P, const T2__& V1,
                             const T3__& V2, const T4__& Ka, const T5__& Keq,
                             std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ Kp;
    
    current_statement__ = 144;
    Kp = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 144;
    Kp = get_Kp_uniuni(V1, Ka, V2, Keq, pstream__);
    current_statement__ = 145;
    return (1 / ((1 + (A / Ka)) + (P / Kp)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_uniuni_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type
operator()(const T0__& A, const T1__& P, const T2__& V1, const T3__& V2,
           const T4__& Ka, const T5__& Keq, std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_uniuni(A, P, V1, V2, Ka, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
get_free_enzyme_ratio_ordered_unibi(const T0__& A, const T1__& P,
                                    const T2__& Q, const T3__& V1,
                                    const T4__& V2, const T5__& Ka,
                                    const T6__& Kp, const T7__& Kq,
                                    const T8__& Kia, const T9__& Kip,
                                    const T10__& Kiq, const T11__& Keq,
                                    std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 147;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 147;
    num = ((Ka * V2) + (((Kq * V1) * P) / Keq));
    local_scalar_t__ denom;
    
    current_statement__ = 148;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 148;
    denom = ((((((Ka * V2) + (V2 * A)) + (((Kq * V1) * P) / Keq)) +
                (((Kp * V1) * Q) / Keq)) + (((V1 * P) * Q) / Keq)) +
              (((V2 * A) * P) / Kip));
    current_statement__ = 149;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_ordered_unibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
operator()(const T0__& A, const T1__& P, const T2__& Q, const T3__& V1,
           const T4__& V2, const T5__& Ka, const T6__& Kp, const T7__& Kq,
           const T8__& Kia, const T9__& Kip, const T10__& Kiq,
           const T11__& Keq, std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_ordered_unibi(A, P, Q, V1, V2, Ka, Kp, Kq, Kia,
         Kip, Kiq, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
get_free_enzyme_ratio_ordered_bibi(const T0__& A, const T1__& B,
                                   const T2__& P, const T3__& Q,
                                   const T4__& V1, const T5__& V2,
                                   const T6__& Ka, const T7__& Kb,
                                   const T8__& Kp, const T9__& Kq,
                                   const T10__& Kia, const T11__& Kib,
                                   const T12__& Kip, const T13__& Kiq,
                                   const T14__& Keq, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__,
          T12__,
          T13__,
          T14__>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 151;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 151;
    num = ((((Kia * Kb) * V2) + (((Kq * V1) * P) / Keq)) + ((Ka * V2) * B));
    local_scalar_t__ denom;
    
    current_statement__ = 152;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 152;
    denom = ((((((((((((Kia * Kb) * V2) + ((Kb * V2) * A)) + ((Ka * V2) * B))
                     + ((V2 * A) * B)) + (((Kq * V1) * P) / Keq)) +
                   (((Kp * V1) * Q) / Keq)) + (((V1 * P) * Q) / Keq)) +
                 ((((Kq * V1) * A) * P) / (Kia * Keq))) +
                ((((Ka * V2) * B) * Q) / Kiq)) +
               ((((V2 * A) * B) * P) / Kip)) +
              ((((V1 * B) * P) * Q) / (Kib * Keq)));
    current_statement__ = 153;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_ordered_bibi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__>::type>::type>::type
operator()(const T0__& A, const T1__& B, const T2__& P, const T3__& Q,
           const T4__& V1, const T5__& V2, const T6__& Ka, const T7__& Kb,
           const T8__& Kp, const T9__& Kq, const T10__& Kia,
           const T11__& Kib, const T12__& Kip, const T13__& Kiq,
           const T14__& Keq, std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_ordered_bibi(A, B, P, Q, V1, V2, Ka, Kb, Kp, Kq,
         Kia, Kib, Kip, Kiq, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__, typename T16__,
typename T17__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__, typename boost::math::tools::promote_args<T15__, T16__,
T17__>::type>::type>::type>::type
get_free_enzyme_ratio_ordered_terbi(const T0__& A, const T1__& B,
                                    const T2__& C, const T3__& P,
                                    const T4__& Q, const T5__& V1,
                                    const T6__& V2, const T7__& Ka,
                                    const T8__& Kb, const T9__& Kc,
                                    const T10__& Kp, const T11__& Kq,
                                    const T12__& Kia, const T13__& Kib,
                                    const T14__& Kic, const T15__& Kip,
                                    const T16__& Kiq, const T17__& Keq,
                                    std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__,
          T12__,
          T13__,
          T14__, typename boost::math::tools::promote_args<T15__,
          T16__,
          T17__>::type>::type>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ num;
    
    current_statement__ = 155;
    num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 155;
    num = ((((((Kq * V1) * P) / Keq) + (((Ka * V2) * B) * C)) +
             (((Kia * Kb) * V2) * C)) + (((Kia * Kib) * Kc) * V2));
    local_scalar_t__ denom;
    
    current_statement__ = 156;
    denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 156;
    denom = ((((((((((((((((((((Kia * Kib) * Kc) * V2) +
                              (((Kib * Kc) * V2) * A)) +
                             (((Kia * Kb) * V2) * C)) +
                            (((Kc * V2) * A) * B)) + (((Kb * V2) * A) * C)) +
                          (((Ka * V2) * B) * C)) + (((V2 * A) * B) * C)) +
                        (((Kp * V1) * Q) / Keq)) + (((Kq * V1) * P) / Keq)) +
                      (((V1 * P) * Q) / Keq)) +
                     ((((Kq * V1) * A) * P) / (Kia * Keq))) +
                    (((((Kia * Kb) * V2) * C) * Q) / Kiq)) +
                   (((((Kq * V1) * A) * B) * P) / ((Kia * Kib) * Keq))) +
                  (((((Ka * V2) * B) * C) * Q) / Kiq)) +
                 ((((((Ka * Kic) * V2) * B) * P) * Q) / (Kip * Kiq))) +
                ((((((Kia * Kb) * V2) * C) * P) * Q) / (Kip * Kiq))) +
               ((((((Kq * V1) * A) * B) * C) * P) /
                 (((Kia * Kib) * Kic) * Keq))) +
              ((((((Ka * V2) * B) * C) * P) * Q) / (Kip * Kiq)));
    current_statement__ = 157;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_ordered_terbi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__, typename T16__,
typename T17__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T13__,
T14__, typename boost::math::tools::promote_args<T15__, T16__,
T17__>::type>::type>::type>::type
operator()(const T0__& A, const T1__& B, const T2__& C, const T3__& P,
           const T4__& Q, const T5__& V1, const T6__& V2, const T7__& Ka,
           const T8__& Kb, const T9__& Kc, const T10__& Kp, const T11__& Kq,
           const T12__& Kia, const T13__& Kib, const T14__& Kic,
           const T15__& Kip, const T16__& Kiq, const T17__& Keq,
           std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_ordered_terbi(A, B, C, P, Q, V1, V2, Ka, Kb, Kc,
         Kp, Kq, Kia, Kib, Kic, Kip, Kiq, Keq, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
get_free_enzyme_ratio_modular_rate_law(const T0__& Tr, const T1__& Dr,
                                       const T2__& Dr_reg,
                                       std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 159;
    return (1 / (Dr + Dr_reg));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_modular_rate_law_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
           std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_modular_rate_law(Tr, Dr, Dr_reg, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
get_fluxes(const std::vector<T0__>& m, const std::vector<T1__>& p,
           std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 161;
    validate_non_negative_index("empty_array", "0", 0);
    std::vector<local_scalar_t__> empty_array;
    empty_array = std::vector<local_scalar_t__>(0, 0);
    
    local_scalar_t__ Tr_r1;
    
    current_statement__ = 162;
    Tr_r1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 162;
    Tr_r1 = (((p[(3 - 1)] * p[(11 - 1)]) *
               pow((p[(1 - 1)] / p[(9 - 1)]), (-1 * -1))) -
              (((((p[(3 - 1)] * p[(11 - 1)]) / p[(6 - 1)]) *
                  pow(p[(9 - 1)], -1)) * pow(p[(10 - 1)], 1)) *
                pow((m[(1 - 1)] / p[(10 - 1)]), 1)));
    local_scalar_t__ Dr_r1;
    
    current_statement__ = 163;
    Dr_r1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 163;
    Dr_r1 = ((pow((1 + (p[(1 - 1)] / p[(9 - 1)])), (-1 * -1)) +
               pow((1 + (m[(1 - 1)] / p[(10 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_r1;
    
    current_statement__ = 164;
    Dr_reg_r1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 164;
    Dr_reg_r1 = 0;
    local_scalar_t__ Tr_r2;
    
    current_statement__ = 165;
    Tr_r2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 165;
    Tr_r2 = (((p[(4 - 1)] * p[(16 - 1)]) *
               pow((m[(1 - 1)] / p[(14 - 1)]), (-1 * -1))) -
              (((((p[(4 - 1)] * p[(16 - 1)]) / p[(7 - 1)]) *
                  pow(p[(14 - 1)], -1)) * pow(p[(15 - 1)], 1)) *
                pow((m[(2 - 1)] / p[(15 - 1)]), 1)));
    local_scalar_t__ Dr_r2;
    
    current_statement__ = 166;
    Dr_r2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 166;
    Dr_r2 = ((pow((1 + (m[(1 - 1)] / p[(14 - 1)])), (-1 * -1)) +
               pow((1 + (m[(2 - 1)] / p[(15 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_r2;
    
    current_statement__ = 167;
    Dr_reg_r2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 167;
    Dr_reg_r2 = (m[(2 - 1)] / p[(19 - 1)]);
    local_scalar_t__ Tr_r3;
    
    current_statement__ = 168;
    Tr_r3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 168;
    Tr_r3 = (((p[(5 - 1)] * p[(22 - 1)]) *
               pow((m[(2 - 1)] / p[(20 - 1)]), (-1 * -1))) -
              (((((p[(5 - 1)] * p[(22 - 1)]) / p[(8 - 1)]) *
                  pow(p[(20 - 1)], -1)) * pow(p[(21 - 1)], 1)) *
                pow((p[(2 - 1)] / p[(21 - 1)]), 1)));
    local_scalar_t__ Dr_r3;
    
    current_statement__ = 169;
    Dr_r3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 169;
    Dr_r3 = ((pow((1 + (m[(2 - 1)] / p[(20 - 1)])), (-1 * -1)) +
               pow((1 + (p[(2 - 1)] / p[(21 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_r3;
    
    current_statement__ = 170;
    Dr_reg_r3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 170;
    Dr_reg_r3 = 0;
    local_scalar_t__ free_enzyme_ratio_r1;
    
    current_statement__ = 171;
    free_enzyme_ratio_r1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 171;
    free_enzyme_ratio_r1 = get_free_enzyme_ratio_modular_rate_law(Tr_r1,
                             Dr_r1, Dr_reg_r1, pstream__);
    local_scalar_t__ free_enzyme_ratio_r2;
    
    current_statement__ = 172;
    free_enzyme_ratio_r2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 172;
    free_enzyme_ratio_r2 = get_free_enzyme_ratio_modular_rate_law(Tr_r2,
                             Dr_r2, Dr_reg_r2, pstream__);
    current_statement__ = 173;
    return transpose(stan::math::to_row_vector(
             stan::math::array_builder<local_scalar_t__>()
             .add((modular_rate_law(Tr_r1, Dr_r1, Dr_reg_r1, pstream__) *
                    get_regulatory_effect(
                      stan::math::array_builder<local_scalar_t__>()
                      .add(m[(2 - 1)]).array(), empty_array,
                      free_enzyme_ratio_r1,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(12 - 1)]).array(), empty_array,
                      p[(13 - 1)], pstream__)))
             .add((modular_rate_law(Tr_r2, Dr_r2, Dr_reg_r2, pstream__) *
                    get_regulatory_effect(empty_array,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(m[(1 - 1)]).array(), free_enzyme_ratio_r2,
                      empty_array,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(17 - 1)]).array(), p[(18 - 1)], pstream__)))
             .add(modular_rate_law(Tr_r3, Dr_r3, Dr_reg_r3, pstream__))
             .array()));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_fluxes_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
operator()(const std::vector<T0__>& m, const std::vector<T1__>& p,
           std::ostream* pstream__)  const 
{
return get_fluxes(m, p, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
ode_func(const T0__& t, const std::vector<T1__>& m,
         const std::vector<T2__>& p, const std::vector<T3__>& xr,
         const std::vector<int>& xi, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 175;
    validate_non_negative_index("fluxes", "3", 3);
    Eigen::Matrix<local_scalar_t__, -1, 1> fluxes;
    fluxes = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    
    current_statement__ = 175;
    for (size_t sym1__ = 1; sym1__ <= 3; ++sym1__) {
      current_statement__ = 175;
      assign(fluxes, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable fluxes");
    }
    current_statement__ = 175;
    assign(fluxes, nil_index_list(), get_fluxes(m, p, pstream__),
      "assigning variable fluxes");
    current_statement__ = 176;
    return stan::math::array_builder<local_scalar_t__>()
        .add(((1 * fluxes[(1 - 1)]) - (1 * fluxes[(2 - 1)])))
        .add(((1 * fluxes[(2 - 1)]) - (1 * fluxes[(3 - 1)]))).array();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ode_func_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
operator()(const T0__& t, const std::vector<T1__>& m,
           const std::vector<T2__>& p, const std::vector<T3__>& xr,
           const std::vector<int>& xi, std::ostream* pstream__)  const 
{
return ode_func(t, m, p, xr, xi, pstream__);
}
};

class inference_model_linear_model : public model_base_crtp<inference_model_linear_model> {

 private:
  int pos__;
  int N_mic;
  int N_unbalanced;
  int N_kinetic_parameters;
  int N_reaction;
  int N_enzyme;
  int N_experiment;
  int N_flux_measurement;
  int N_enzyme_measurement;
  int N_conc_measurement;
  int N_metabolite;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> balanced_mic_ix;
  std::vector<int> experiment_yconc;
  std::vector<int> mic_ix_yconc;
  Eigen::Matrix<double, -1, 1> yconc;
  Eigen::Matrix<double, -1, 1> sigma_conc;
  std::vector<int> experiment_yflux;
  std::vector<int> reaction_yflux;
  Eigen::Matrix<double, -1, 1> yflux;
  Eigen::Matrix<double, -1, 1> sigma_flux;
  std::vector<int> experiment_yenz;
  std::vector<int> enzyme_yenz;
  Eigen::Matrix<double, -1, 1> yenz;
  Eigen::Matrix<double, -1, 1> sigma_enz;
  Eigen::Matrix<double, -1, 1> prior_loc_formation_energy;
  Eigen::Matrix<double, -1, -1> prior_scale_formation_energy;
  Eigen::Matrix<double, -1, 1> prior_loc_kinetic_parameters;
  Eigen::Matrix<double, -1, 1> prior_scale_kinetic_parameters;
  std::vector<std::vector<double>> prior_loc_unbalanced;
  std::vector<std::vector<double>> prior_scale_unbalanced;
  std::vector<std::vector<double>> prior_loc_enzyme;
  std::vector<std::vector<double>> prior_scale_enzyme;
  Eigen::Matrix<double, -1, -1> stoichiometric_matrix;
  std::vector<int> metabolite_ix_stoichiometric_matrix;
  std::vector<std::vector<double>> conc_init;
  double rtol;
  double ftol;
  int steps;
  int LIKELIHOOD;
  double timepoint;
  std::vector<double> xr;
  std::vector<int> xi;
  double minus_RT;
 
 public:
  ~inference_model_linear_model() { }
  
  std::string model_name() const { return "inference_model_linear_model"; }
  
  inference_model_linear_model(stan::io::var_context& context__,
                               unsigned int random_seed__ = 0,
                               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "inference_model_linear_model_namespace::inference_model_linear_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","N_mic","int",
          context__.to_vec());
      
      current_statement__ = 52;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      context__.validate_dims("data initialization","N_unbalanced","int",
          context__.to_vec());
      
      current_statement__ = 53;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      context__.validate_dims("data initialization","N_kinetic_parameters",
          "int",context__.to_vec());
      
      current_statement__ = 54;
      N_kinetic_parameters = context__.vals_i("N_kinetic_parameters")[
          (1 - 1)];
      context__.validate_dims("data initialization","N_reaction","int",
          context__.to_vec());
      
      current_statement__ = 55;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      context__.validate_dims("data initialization","N_enzyme","int",
          context__.to_vec());
      
      current_statement__ = 56;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      context__.validate_dims("data initialization","N_experiment","int",
          context__.to_vec());
      
      current_statement__ = 57;
      N_experiment = context__.vals_i("N_experiment")[(1 - 1)];
      context__.validate_dims("data initialization","N_flux_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 58;
      N_flux_measurement = context__.vals_i("N_flux_measurement")[(1 - 1)];
      context__.validate_dims("data initialization","N_enzyme_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 59;
      N_enzyme_measurement = context__.vals_i("N_enzyme_measurement")[
          (1 - 1)];
      context__.validate_dims("data initialization","N_conc_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 60;
      N_conc_measurement = context__.vals_i("N_conc_measurement")[(1 - 1)];
      context__.validate_dims("data initialization","N_metabolite","int",
          context__.to_vec());
      
      current_statement__ = 61;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      current_statement__ = 62;
      validate_non_negative_index("unbalanced_mic_ix", "N_unbalanced",
                                  N_unbalanced);
      context__.validate_dims("data initialization","unbalanced_mic_ix",
          "int",context__.to_vec(N_unbalanced));
      unbalanced_mic_ix = std::vector<int>(N_unbalanced, 0);
      
      current_statement__ = 62;
      assign(unbalanced_mic_ix, nil_index_list(),
        context__.vals_i("unbalanced_mic_ix"),
        "assigning variable unbalanced_mic_ix");
      current_statement__ = 63;
      validate_non_negative_index("balanced_mic_ix",
                                  "(N_mic - N_unbalanced)",
                                  (N_mic - N_unbalanced));
      context__.validate_dims("data initialization","balanced_mic_ix","int",
          context__.to_vec((N_mic - N_unbalanced)));
      balanced_mic_ix = std::vector<int>((N_mic - N_unbalanced), 0);
      
      current_statement__ = 63;
      assign(balanced_mic_ix, nil_index_list(),
        context__.vals_i("balanced_mic_ix"),
        "assigning variable balanced_mic_ix");
      current_statement__ = 64;
      validate_non_negative_index("experiment_yconc", "N_conc_measurement",
                                  N_conc_measurement);
      context__.validate_dims("data initialization","experiment_yconc","int",
          context__.to_vec(N_conc_measurement));
      experiment_yconc = std::vector<int>(N_conc_measurement, 0);
      
      current_statement__ = 64;
      assign(experiment_yconc, nil_index_list(),
        context__.vals_i("experiment_yconc"),
        "assigning variable experiment_yconc");
      current_statement__ = 65;
      validate_non_negative_index("mic_ix_yconc", "N_conc_measurement",
                                  N_conc_measurement);
      context__.validate_dims("data initialization","mic_ix_yconc","int",
          context__.to_vec(N_conc_measurement));
      mic_ix_yconc = std::vector<int>(N_conc_measurement, 0);
      
      current_statement__ = 65;
      assign(mic_ix_yconc, nil_index_list(),
        context__.vals_i("mic_ix_yconc"), "assigning variable mic_ix_yconc");
      current_statement__ = 66;
      validate_non_negative_index("yconc", "N_conc_measurement",
                                  N_conc_measurement);
      context__.validate_dims("data initialization","yconc","double",
          context__.to_vec(N_conc_measurement));
      yconc = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      
      {
        std::vector<local_scalar_t__> yconc_flat__;
        current_statement__ = 66;
        assign(yconc_flat__, nil_index_list(), context__.vals_r("yconc"),
          "assigning variable yconc_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
          current_statement__ = 66;
          assign(yconc, cons_list(index_uni(sym1__), nil_index_list()),
            yconc_flat__[(pos__ - 1)], "assigning variable yconc");
          current_statement__ = 66;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 67;
      validate_non_negative_index("sigma_conc", "N_conc_measurement",
                                  N_conc_measurement);
      context__.validate_dims("data initialization","sigma_conc","double",
          context__.to_vec(N_conc_measurement));
      sigma_conc = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      
      {
        std::vector<local_scalar_t__> sigma_conc_flat__;
        current_statement__ = 67;
        assign(sigma_conc_flat__, nil_index_list(),
          context__.vals_r("sigma_conc"),
          "assigning variable sigma_conc_flat__");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
          current_statement__ = 67;
          assign(sigma_conc, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_conc_flat__[(pos__ - 1)], "assigning variable sigma_conc");
          current_statement__ = 67;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 68;
      validate_non_negative_index("experiment_yflux", "N_flux_measurement",
                                  N_flux_measurement);
      context__.validate_dims("data initialization","experiment_yflux","int",
          context__.to_vec(N_flux_measurement));
      experiment_yflux = std::vector<int>(N_flux_measurement, 0);
      
      current_statement__ = 68;
      assign(experiment_yflux, nil_index_list(),
        context__.vals_i("experiment_yflux"),
        "assigning variable experiment_yflux");
      current_statement__ = 69;
      validate_non_negative_index("reaction_yflux", "N_flux_measurement",
                                  N_flux_measurement);
      context__.validate_dims("data initialization","reaction_yflux","int",
          context__.to_vec(N_flux_measurement));
      reaction_yflux = std::vector<int>(N_flux_measurement, 0);
      
      current_statement__ = 69;
      assign(reaction_yflux, nil_index_list(),
        context__.vals_i("reaction_yflux"),
        "assigning variable reaction_yflux");
      current_statement__ = 70;
      validate_non_negative_index("yflux", "N_flux_measurement",
                                  N_flux_measurement);
      context__.validate_dims("data initialization","yflux","double",
          context__.to_vec(N_flux_measurement));
      yflux = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      
      {
        std::vector<local_scalar_t__> yflux_flat__;
        current_statement__ = 70;
        assign(yflux_flat__, nil_index_list(), context__.vals_r("yflux"),
          "assigning variable yflux_flat__");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
          current_statement__ = 70;
          assign(yflux, cons_list(index_uni(sym1__), nil_index_list()),
            yflux_flat__[(pos__ - 1)], "assigning variable yflux");
          current_statement__ = 70;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 71;
      validate_non_negative_index("sigma_flux", "N_flux_measurement",
                                  N_flux_measurement);
      context__.validate_dims("data initialization","sigma_flux","double",
          context__.to_vec(N_flux_measurement));
      sigma_flux = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      
      {
        std::vector<local_scalar_t__> sigma_flux_flat__;
        current_statement__ = 71;
        assign(sigma_flux_flat__, nil_index_list(),
          context__.vals_r("sigma_flux"),
          "assigning variable sigma_flux_flat__");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
          current_statement__ = 71;
          assign(sigma_flux, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flux_flat__[(pos__ - 1)], "assigning variable sigma_flux");
          current_statement__ = 71;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 72;
      validate_non_negative_index("experiment_yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      context__.validate_dims("data initialization","experiment_yenz","int",
          context__.to_vec(N_enzyme_measurement));
      experiment_yenz = std::vector<int>(N_enzyme_measurement, 0);
      
      current_statement__ = 72;
      assign(experiment_yenz, nil_index_list(),
        context__.vals_i("experiment_yenz"),
        "assigning variable experiment_yenz");
      current_statement__ = 73;
      validate_non_negative_index("enzyme_yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      context__.validate_dims("data initialization","enzyme_yenz","int",
          context__.to_vec(N_enzyme_measurement));
      enzyme_yenz = std::vector<int>(N_enzyme_measurement, 0);
      
      current_statement__ = 73;
      assign(enzyme_yenz, nil_index_list(), context__.vals_i("enzyme_yenz"),
        "assigning variable enzyme_yenz");
      current_statement__ = 74;
      validate_non_negative_index("yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      context__.validate_dims("data initialization","yenz","double",
          context__.to_vec(N_enzyme_measurement));
      yenz = Eigen::Matrix<double, -1, 1>(N_enzyme_measurement);
      
      {
        std::vector<local_scalar_t__> yenz_flat__;
        current_statement__ = 74;
        assign(yenz_flat__, nil_index_list(), context__.vals_r("yenz"),
          "assigning variable yenz_flat__");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
          current_statement__ = 74;
          assign(yenz, cons_list(index_uni(sym1__), nil_index_list()),
            yenz_flat__[(pos__ - 1)], "assigning variable yenz");
          current_statement__ = 74;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 75;
      validate_non_negative_index("sigma_enz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      context__.validate_dims("data initialization","sigma_enz","double",
          context__.to_vec(N_enzyme_measurement));
      sigma_enz = Eigen::Matrix<double, -1, 1>(N_enzyme_measurement);
      
      {
        std::vector<local_scalar_t__> sigma_enz_flat__;
        current_statement__ = 75;
        assign(sigma_enz_flat__, nil_index_list(),
          context__.vals_r("sigma_enz"),
          "assigning variable sigma_enz_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
          current_statement__ = 75;
          assign(sigma_enz, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_enz_flat__[(pos__ - 1)], "assigning variable sigma_enz");
          current_statement__ = 75;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 76;
      validate_non_negative_index("prior_loc_formation_energy", "N_mic",
                                  N_mic);
      context__.validate_dims("data initialization",
          "prior_loc_formation_energy","double",context__.to_vec(N_mic));
      prior_loc_formation_energy = Eigen::Matrix<double, -1, 1>(N_mic);
      
      {
        std::vector<local_scalar_t__> prior_loc_formation_energy_flat__;
        current_statement__ = 76;
        assign(prior_loc_formation_energy_flat__, nil_index_list(),
          context__.vals_r("prior_loc_formation_energy"),
          "assigning variable prior_loc_formation_energy_flat__");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 76;
          assign(prior_loc_formation_energy,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_loc_formation_energy_flat__[(pos__ - 1)],
            "assigning variable prior_loc_formation_energy");
          current_statement__ = 76;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 77;
      validate_non_negative_index("prior_scale_formation_energy", "N_mic",
                                  N_mic);
      current_statement__ = 77;
      validate_non_negative_index("prior_scale_formation_energy", "N_mic",
                                  N_mic);
      context__.validate_dims("data initialization",
          "prior_scale_formation_energy","double",
          context__.to_vec(N_mic, N_mic));
      prior_scale_formation_energy = Eigen::Matrix<double, -1, -1>(N_mic, N_mic);
      
      {
        std::vector<local_scalar_t__> prior_scale_formation_energy_flat__;
        current_statement__ = 77;
        assign(prior_scale_formation_energy_flat__, nil_index_list(),
          context__.vals_r("prior_scale_formation_energy"),
          "assigning variable prior_scale_formation_energy_flat__");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 77;
          for (size_t sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 77;
            assign(prior_scale_formation_energy,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_scale_formation_energy_flat__[(pos__ - 1)],
              "assigning variable prior_scale_formation_energy");
            current_statement__ = 77;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 78;
      validate_non_negative_index("prior_loc_kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      context__.validate_dims("data initialization",
          "prior_loc_kinetic_parameters","double",
          context__.to_vec(N_kinetic_parameters));
      prior_loc_kinetic_parameters = Eigen::Matrix<double, -1, 1>(N_kinetic_parameters);
      
      {
        std::vector<local_scalar_t__> prior_loc_kinetic_parameters_flat__;
        current_statement__ = 78;
        assign(prior_loc_kinetic_parameters_flat__, nil_index_list(),
          context__.vals_r("prior_loc_kinetic_parameters"),
          "assigning variable prior_loc_kinetic_parameters_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
          current_statement__ = 78;
          assign(prior_loc_kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_loc_kinetic_parameters_flat__[(pos__ - 1)],
            "assigning variable prior_loc_kinetic_parameters");
          current_statement__ = 78;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 79;
      validate_non_negative_index("prior_scale_kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      context__.validate_dims("data initialization",
          "prior_scale_kinetic_parameters","double",
          context__.to_vec(N_kinetic_parameters));
      prior_scale_kinetic_parameters = Eigen::Matrix<double, -1, 1>(N_kinetic_parameters);
      
      {
        std::vector<local_scalar_t__> prior_scale_kinetic_parameters_flat__;
        current_statement__ = 79;
        assign(prior_scale_kinetic_parameters_flat__, nil_index_list(),
          context__.vals_r("prior_scale_kinetic_parameters"),
          "assigning variable prior_scale_kinetic_parameters_flat__");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
          current_statement__ = 79;
          assign(prior_scale_kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_scale_kinetic_parameters_flat__[(pos__ - 1)],
            "assigning variable prior_scale_kinetic_parameters");
          current_statement__ = 79;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 80;
      validate_non_negative_index("prior_loc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 80;
      validate_non_negative_index("prior_loc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      context__.validate_dims("data initialization","prior_loc_unbalanced",
          "double",context__.to_vec(N_experiment, N_unbalanced));
      prior_loc_unbalanced = std::vector<std::vector<double>>(N_experiment, std::vector<double>(N_unbalanced, 0));
      
      {
        std::vector<local_scalar_t__> prior_loc_unbalanced_flat__;
        current_statement__ = 80;
        assign(prior_loc_unbalanced_flat__, nil_index_list(),
          context__.vals_r("prior_loc_unbalanced"),
          "assigning variable prior_loc_unbalanced_flat__");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 80;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 80;
            assign(prior_loc_unbalanced,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_loc_unbalanced_flat__[(pos__ - 1)],
              "assigning variable prior_loc_unbalanced");
            current_statement__ = 80;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 81;
      validate_non_negative_index("prior_scale_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 81;
      validate_non_negative_index("prior_scale_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      context__.validate_dims("data initialization","prior_scale_unbalanced",
          "double",context__.to_vec(N_experiment, N_unbalanced));
      prior_scale_unbalanced = std::vector<std::vector<double>>(N_experiment, std::vector<double>(N_unbalanced, 0));
      
      {
        std::vector<local_scalar_t__> prior_scale_unbalanced_flat__;
        current_statement__ = 81;
        assign(prior_scale_unbalanced_flat__, nil_index_list(),
          context__.vals_r("prior_scale_unbalanced"),
          "assigning variable prior_scale_unbalanced_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 81;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 81;
            assign(prior_scale_unbalanced,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_scale_unbalanced_flat__[(pos__ - 1)],
              "assigning variable prior_scale_unbalanced");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("prior_loc_enzyme", "N_experiment",
                                  N_experiment);
      current_statement__ = 82;
      validate_non_negative_index("prior_loc_enzyme", "N_enzyme", N_enzyme);
      context__.validate_dims("data initialization","prior_loc_enzyme",
          "double",context__.to_vec(N_experiment, N_enzyme));
      prior_loc_enzyme = std::vector<std::vector<double>>(N_experiment, std::vector<double>(N_enzyme, 0));
      
      {
        std::vector<local_scalar_t__> prior_loc_enzyme_flat__;
        current_statement__ = 82;
        assign(prior_loc_enzyme_flat__, nil_index_list(),
          context__.vals_r("prior_loc_enzyme"),
          "assigning variable prior_loc_enzyme_flat__");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 82;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 82;
            assign(prior_loc_enzyme,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_loc_enzyme_flat__[(pos__ - 1)],
              "assigning variable prior_loc_enzyme");
            current_statement__ = 82;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 83;
      validate_non_negative_index("prior_scale_enzyme", "N_experiment",
                                  N_experiment);
      current_statement__ = 83;
      validate_non_negative_index("prior_scale_enzyme", "N_enzyme", N_enzyme);
      context__.validate_dims("data initialization","prior_scale_enzyme",
          "double",context__.to_vec(N_experiment, N_enzyme));
      prior_scale_enzyme = std::vector<std::vector<double>>(N_experiment, std::vector<double>(N_enzyme, 0));
      
      {
        std::vector<local_scalar_t__> prior_scale_enzyme_flat__;
        current_statement__ = 83;
        assign(prior_scale_enzyme_flat__, nil_index_list(),
          context__.vals_r("prior_scale_enzyme"),
          "assigning variable prior_scale_enzyme_flat__");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 83;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 83;
            assign(prior_scale_enzyme,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_scale_enzyme_flat__[(pos__ - 1)],
              "assigning variable prior_scale_enzyme");
            current_statement__ = 83;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 84;
      validate_non_negative_index("stoichiometric_matrix", "N_mic", N_mic);
      current_statement__ = 84;
      validate_non_negative_index("stoichiometric_matrix", "N_enzyme",
                                  N_enzyme);
      context__.validate_dims("data initialization","stoichiometric_matrix",
          "double",context__.to_vec(N_mic, N_enzyme));
      stoichiometric_matrix = Eigen::Matrix<double, -1, -1>(N_mic, N_enzyme);
      
      {
        std::vector<local_scalar_t__> stoichiometric_matrix_flat__;
        current_statement__ = 84;
        assign(stoichiometric_matrix_flat__, nil_index_list(),
          context__.vals_r("stoichiometric_matrix"),
          "assigning variable stoichiometric_matrix_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 84;
          for (size_t sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 84;
            assign(stoichiometric_matrix,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              stoichiometric_matrix_flat__[(pos__ - 1)],
              "assigning variable stoichiometric_matrix");
            current_statement__ = 84;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      validate_non_negative_index("metabolite_ix_stoichiometric_matrix",
                                  "N_mic", N_mic);
      context__.validate_dims("data initialization",
          "metabolite_ix_stoichiometric_matrix","int",
          context__.to_vec(N_mic));
      metabolite_ix_stoichiometric_matrix = std::vector<int>(N_mic, 0);
      
      current_statement__ = 85;
      assign(metabolite_ix_stoichiometric_matrix, nil_index_list(),
        context__.vals_i("metabolite_ix_stoichiometric_matrix"),
        "assigning variable metabolite_ix_stoichiometric_matrix");
      current_statement__ = 86;
      validate_non_negative_index("conc_init", "N_experiment", N_experiment);
      current_statement__ = 86;
      validate_non_negative_index("conc_init", "(N_mic - N_unbalanced)",
                                  (N_mic - N_unbalanced));
      context__.validate_dims("data initialization","conc_init","double",
          context__.to_vec(N_experiment, (N_mic - N_unbalanced)));
      conc_init = std::vector<std::vector<double>>(N_experiment, std::vector<double>(
        (N_mic - N_unbalanced), 0));
      
      {
        std::vector<local_scalar_t__> conc_init_flat__;
        current_statement__ = 86;
        assign(conc_init_flat__, nil_index_list(),
          context__.vals_r("conc_init"),
          "assigning variable conc_init_flat__");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (size_t sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
          current_statement__ = 86;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 86;
            assign(conc_init,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              conc_init_flat__[(pos__ - 1)], "assigning variable conc_init");
            current_statement__ = 86;
            pos__ = (pos__ + 1);}}
      }
      context__.validate_dims("data initialization","rtol","double",
          context__.to_vec());
      
      current_statement__ = 87;
      rtol = context__.vals_r("rtol")[(1 - 1)];
      context__.validate_dims("data initialization","ftol","double",
          context__.to_vec());
      
      current_statement__ = 88;
      ftol = context__.vals_r("ftol")[(1 - 1)];
      context__.validate_dims("data initialization","steps","int",
          context__.to_vec());
      
      current_statement__ = 89;
      steps = context__.vals_i("steps")[(1 - 1)];
      context__.validate_dims("data initialization","LIKELIHOOD","int",
          context__.to_vec());
      
      current_statement__ = 90;
      LIKELIHOOD = context__.vals_i("LIKELIHOOD")[(1 - 1)];
      context__.validate_dims("data initialization","timepoint","double",
          context__.to_vec());
      
      current_statement__ = 91;
      timepoint = context__.vals_r("timepoint")[(1 - 1)];
      current_statement__ = 92;
      validate_non_negative_index("xr", "0", 0);
      xr = std::vector<double>(0, 0);
      
      current_statement__ = 93;
      validate_non_negative_index("xi", "0", 0);
      xi = std::vector<int>(0, 0);
      
      
      current_statement__ = 94;
      minus_RT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 94;
      minus_RT = (-0.008314 * 298.15);
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "N_unbalanced", N_unbalanced, 1);
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "N_kinetic_parameters",
                             N_kinetic_parameters, 1);
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "N_reaction", N_reaction, 1);
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 57;
      current_statement__ = 57;
      check_greater_or_equal(function__, "N_experiment", N_experiment, 1);
      current_statement__ = 58;
      current_statement__ = 58;
      check_greater_or_equal(function__, "N_flux_measurement",
                             N_flux_measurement, 1);
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "N_enzyme_measurement",
                             N_enzyme_measurement, 1);
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "N_conc_measurement",
                             N_conc_measurement, 1);
      current_statement__ = 61;
      current_statement__ = 61;
      check_greater_or_equal(function__, "N_metabolite", N_metabolite, 1);
      current_statement__ = 62;
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 62;
        current_statement__ = 62;
        check_greater_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                               unbalanced_mic_ix[(sym1__ - 1)], 1);}
      current_statement__ = 62;
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 62;
        current_statement__ = 62;
        check_less_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                            unbalanced_mic_ix[(sym1__ - 1)], N_mic);}
      current_statement__ = 63;
      for (size_t sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_greater_or_equal(function__, "balanced_mic_ix[sym1__]",
                               balanced_mic_ix[(sym1__ - 1)], 1);}
      current_statement__ = 63;
      for (size_t sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_less_or_equal(function__, "balanced_mic_ix[sym1__]",
                            balanced_mic_ix[(sym1__ - 1)], N_mic);}
      current_statement__ = 64;
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 64;
        current_statement__ = 64;
        check_greater_or_equal(function__, "experiment_yconc[sym1__]",
                               experiment_yconc[(sym1__ - 1)], 1);}
      current_statement__ = 64;
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 64;
        current_statement__ = 64;
        check_less_or_equal(function__, "experiment_yconc[sym1__]",
                            experiment_yconc[(sym1__ - 1)], N_experiment);}
      current_statement__ = 65;
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 65;
        current_statement__ = 65;
        check_greater_or_equal(function__, "mic_ix_yconc[sym1__]",
                               mic_ix_yconc[(sym1__ - 1)], 1);}
      current_statement__ = 65;
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 65;
        current_statement__ = 65;
        check_less_or_equal(function__, "mic_ix_yconc[sym1__]",
                            mic_ix_yconc[(sym1__ - 1)], N_mic);}
      current_statement__ = 67;
      current_statement__ = 67;
      check_greater_or_equal(function__, "sigma_conc", sigma_conc, 0);
      current_statement__ = 68;
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 68;
        current_statement__ = 68;
        check_greater_or_equal(function__, "experiment_yflux[sym1__]",
                               experiment_yflux[(sym1__ - 1)], 1);}
      current_statement__ = 68;
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 68;
        current_statement__ = 68;
        check_less_or_equal(function__, "experiment_yflux[sym1__]",
                            experiment_yflux[(sym1__ - 1)], N_experiment);}
      current_statement__ = 69;
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 69;
        current_statement__ = 69;
        check_greater_or_equal(function__, "reaction_yflux[sym1__]",
                               reaction_yflux[(sym1__ - 1)], 1);}
      current_statement__ = 69;
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 69;
        current_statement__ = 69;
        check_less_or_equal(function__, "reaction_yflux[sym1__]",
                            reaction_yflux[(sym1__ - 1)], N_reaction);}
      current_statement__ = 71;
      current_statement__ = 71;
      check_greater_or_equal(function__, "sigma_flux", sigma_flux, 0);
      current_statement__ = 72;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 72;
        current_statement__ = 72;
        check_greater_or_equal(function__, "experiment_yenz[sym1__]",
                               experiment_yenz[(sym1__ - 1)], 1);}
      current_statement__ = 72;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 72;
        current_statement__ = 72;
        check_less_or_equal(function__, "experiment_yenz[sym1__]",
                            experiment_yenz[(sym1__ - 1)], N_experiment);}
      current_statement__ = 73;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 73;
        current_statement__ = 73;
        check_greater_or_equal(function__, "enzyme_yenz[sym1__]",
                               enzyme_yenz[(sym1__ - 1)], 1);}
      current_statement__ = 73;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 73;
        current_statement__ = 73;
        check_less_or_equal(function__, "enzyme_yenz[sym1__]",
                            enzyme_yenz[(sym1__ - 1)], N_enzyme);}
      current_statement__ = 75;
      current_statement__ = 75;
      check_greater_or_equal(function__, "sigma_enz", sigma_enz, 0);
      current_statement__ = 79;
      current_statement__ = 79;
      check_greater_or_equal(function__, "prior_scale_kinetic_parameters",
                             prior_scale_kinetic_parameters, 0);
      current_statement__ = 81;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 81;
        for (size_t sym2__ = 1; sym2__ <= N_unbalanced; ++sym2__) {
          current_statement__ = 81;
          current_statement__ = 81;
          check_greater_or_equal(function__,
                                 "prior_scale_unbalanced[sym1__, sym2__]",
                                 prior_scale_unbalanced[(sym1__ - 1)][
                                 (sym2__ - 1)], 0);}}
      current_statement__ = 83;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 83;
        for (size_t sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 83;
          current_statement__ = 83;
          check_greater_or_equal(function__,
                                 "prior_scale_enzyme[sym1__, sym2__]",
                                 prior_scale_enzyme[(sym1__ - 1)][(sym2__ -
                                                                    1)], 0);}
      }
      current_statement__ = 85;
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 85;
        current_statement__ = 85;
        check_greater_or_equal(function__,
                               "metabolite_ix_stoichiometric_matrix[sym1__]",
                               metabolite_ix_stoichiometric_matrix[(sym1__ -
                                                                    1)], 1);}
      current_statement__ = 85;
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 85;
        current_statement__ = 85;
        check_less_or_equal(function__,
                            "metabolite_ix_stoichiometric_matrix[sym1__]",
                            metabolite_ix_stoichiometric_matrix[(sym1__ - 1)],
                            N_metabolite);}
      current_statement__ = 86;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 86;
        for (size_t sym2__ = 1; sym2__ <= (N_mic - N_unbalanced); ++sym2__) {
          current_statement__ = 86;
          current_statement__ = 86;
          check_greater_or_equal(function__, "conc_init[sym1__, sym2__]",
                                 conc_init[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 90;
      current_statement__ = 90;
      check_greater_or_equal(function__, "LIKELIHOOD", LIKELIHOOD, 0);
      current_statement__ = 90;
      current_statement__ = 90;
      check_less_or_equal(function__, "LIKELIHOOD", LIKELIHOOD, 1);
      current_statement__ = 91;
      current_statement__ = 91;
      check_greater_or_equal(function__, "timepoint", timepoint, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("formation_energy", "N_mic", N_mic);
      num_params_r__ += N_mic;
      current_statement__ = 2;
      validate_non_negative_index("kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      num_params_r__ += N_kinetic_parameters;
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_experiment",
                                  N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_enzyme",
                                  N_enzyme);
      num_params_r__ += N_experiment * N_enzyme;
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      num_params_r__ += N_experiment * N_unbalanced;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "inference_model_linear_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("formation_energy", "N_mic", N_mic);
      Eigen::Matrix<local_scalar_t__, -1, 1> formation_energy;
      formation_energy = Eigen::Matrix<local_scalar_t__, -1, 1>(N_mic);
      
      current_statement__ = 1;
      formation_energy = in__.vector(N_mic);
      current_statement__ = 2;
      validate_non_negative_index("kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      Eigen::Matrix<local_scalar_t__, -1, 1> kinetic_parameters;
      kinetic_parameters = Eigen::Matrix<local_scalar_t__, -1, 1>(N_kinetic_parameters);
      
      current_statement__ = 2;
      kinetic_parameters = in__.vector(N_kinetic_parameters);
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(kinetic_parameters[(sym1__ - 1)], 0,
              lp__), "assigning variable kinetic_parameters");
        } else {
          current_statement__ = 2;
          assign(kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(kinetic_parameters[(sym1__ - 1)], 0),
            "assigning variable kinetic_parameters");
        }}
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_experiment",
                                  N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_enzyme",
                                  N_enzyme);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> enzyme_concentration;
      enzyme_concentration = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme));
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 3;
        assign(enzyme_concentration,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N_enzyme), "assigning variable enzyme_concentration");}
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 3;
        for (size_t sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 3;
          if (jacobian__) {
            current_statement__ = 3;
            assign(enzyme_concentration,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                enzyme_concentration[(sym1__ - 1)][(sym2__ - 1)], 0, lp__),
              "assigning variable enzyme_concentration");
          } else {
            current_statement__ = 3;
            assign(enzyme_concentration,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                enzyme_concentration[(sym1__ - 1)][(sym2__ - 1)], 0),
              "assigning variable enzyme_concentration");
          }}}
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc_unbalanced;
      conc_unbalanced = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_unbalanced));
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 4;
        assign(conc_unbalanced,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N_unbalanced), "assigning variable conc_unbalanced");}
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 4;
        for (size_t sym2__ = 1; sym2__ <= N_unbalanced; ++sym2__) {
          current_statement__ = 4;
          if (jacobian__) {
            current_statement__ = 4;
            assign(conc_unbalanced,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                conc_unbalanced[(sym1__ - 1)][(sym2__ - 1)], 0, lp__),
              "assigning variable conc_unbalanced");
          } else {
            current_statement__ = 4;
            assign(conc_unbalanced,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                conc_unbalanced[(sym1__ - 1)][(sym2__ - 1)], 0),
              "assigning variable conc_unbalanced");
          }}}
      local_scalar_t__ initial_time;
      
      current_statement__ = 5;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      initial_time = 0;
      current_statement__ = 6;
      validate_non_negative_index("conc", "N_experiment", N_experiment);
      current_statement__ = 6;
      validate_non_negative_index("conc", "N_mic", N_mic);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc;
      conc = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_mic));
      
      current_statement__ = 6;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 6;
        for (size_t sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 6;
          assign(conc,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable conc");}}
      current_statement__ = 7;
      validate_non_negative_index("flux", "N_experiment", N_experiment);
      current_statement__ = 7;
      validate_non_negative_index("flux", "N_reaction", N_reaction);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> flux;
      flux = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_reaction));
      
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 7;
        for (size_t sym2__ = 1; sym2__ <= N_reaction; ++sym2__) {
          current_statement__ = 7;
          assign(flux,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable flux");}}
      current_statement__ = 8;
      validate_non_negative_index("delta_g", "N_enzyme", N_enzyme);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_g;
      delta_g = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
      
      current_statement__ = 8;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        current_statement__ = 8;
        assign(delta_g, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable delta_g");}
      current_statement__ = 8;
      assign(delta_g, nil_index_list(),
        multiply(transpose(stoichiometric_matrix), formation_energy),
        "assigning variable delta_g");
      current_statement__ = 15;
      for (size_t e = 1; e <= N_experiment; ++e) {
        current_statement__ = 9;
        validate_non_negative_index("keq", "N_enzyme", N_enzyme);
        Eigen::Matrix<local_scalar_t__, -1, 1> keq;
        keq = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
        
        current_statement__ = 9;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 9;
          assign(keq, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable keq");}
        current_statement__ = 9;
        assign(keq, nil_index_list(),
          stan::math::exp(divide(delta_g, minus_RT)),
          "assigning variable keq");
        current_statement__ = 10;
        validate_non_negative_index("theta",
                                    "(((N_unbalanced + N_enzyme) + N_enzyme) + N_kinetic_parameters)",
                                    (((N_unbalanced + N_enzyme) + N_enzyme) +
                                      N_kinetic_parameters));
        Eigen::Matrix<local_scalar_t__, -1, 1> theta;
        theta = Eigen::Matrix<local_scalar_t__, -1, 1>((((N_unbalanced +
                                                           N_enzyme) +
                                                          N_enzyme) +
                                                         N_kinetic_parameters));
        
        current_statement__ = 10;
        for (size_t sym1__ = 1;
             sym1__ <= (((N_unbalanced + N_enzyme) + N_enzyme) +
                         N_kinetic_parameters); ++sym1__) {
          current_statement__ = 10;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable theta");}
        current_statement__ = 10;
        assign(theta, nil_index_list(),
          append_row(
            append_row(
              append_row(conc_unbalanced[(e - 1)],
                enzyme_concentration[(e - 1)]), keq), kinetic_parameters),
          "assigning variable theta");
        current_statement__ = 11;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_multi(balanced_mic_ix), nil_index_list())),
          to_vector(
            rvalue(
              integrate_ode_bdf(ode_func_functor__(),
  rvalue(conc_init,
    cons_list(index_uni(e), cons_list(index_omni(), nil_index_list())),
    "conc_init"), initial_time, rep_array(timepoint, 1), to_array_1d(theta),
  xr, rep_array(0, 1), pstream__, 1e-8, 1e-12, 1e5),
              cons_list(index_uni(1),
                cons_list(index_omni(), nil_index_list())),
              "integrate_ode_bdf(ode_func, conc_init[e, :], initial_time,\n                  rep_array(timepoint, 1), to_array_1d(theta), xr,\n                  rep_array(0, 1), 1e-8, 1e-12, 1e5)")),
          "assigning variable conc");
        current_statement__ = 12;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_multi(unbalanced_mic_ix), nil_index_list())),
          conc_unbalanced[(e - 1)], "assigning variable conc");
        current_statement__ = 13;
        assign(flux, cons_list(index_uni(e), nil_index_list()),
          get_fluxes(
            to_array_1d(
              rvalue(conc,
                cons_list(index_uni(e),
                  cons_list(index_multi(balanced_mic_ix), nil_index_list())),
                "conc")), to_array_1d(theta), pstream__),
          "assigning variable flux");}
      current_statement__ = 6;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 6;
        current_statement__ = 6;
        check_greater_or_equal(function__, "conc[sym1__]",
                               conc[(sym1__ - 1)], 0);}
      {
        current_statement__ = 35;
        lp_accum__.add(
          lognormal_log<propto__>(kinetic_parameters,
            stan::math::log(prior_loc_kinetic_parameters),
            prior_scale_kinetic_parameters));
        current_statement__ = 36;
        lp_accum__.add(
          multi_normal_log<propto__>(formation_energy,
            prior_loc_formation_energy, prior_scale_formation_energy));
        current_statement__ = 40;
        for (size_t e = 1; e <= N_experiment; ++e) {
          current_statement__ = 37;
          lp_accum__.add(
            lognormal_log<propto__>(conc_unbalanced[(e - 1)],
              stan::math::log(prior_loc_unbalanced[(e - 1)]),
              prior_scale_unbalanced[(e - 1)]));
          current_statement__ = 38;
          lp_accum__.add(
            lognormal_log<propto__>(enzyme_concentration[(e - 1)],
              stan::math::log(prior_loc_enzyme[(e - 1)]),
              prior_scale_enzyme[(e - 1)]));}
        current_statement__ = 51;
        if (logical_eq(LIKELIHOOD, 1)) {
          current_statement__ = 43;
          for (size_t c = 1; c <= N_conc_measurement; ++c) {
            current_statement__ = 41;
            lp_accum__.add(
              lognormal_lpdf<false>(yconc[(c - 1)],
                stan::math::log(
                  conc[(experiment_yconc[(c - 1)] - 1)][(mic_ix_yconc[
                                                          (c - 1)] - 1)]),
                sigma_conc[(c - 1)]));}
          current_statement__ = 46;
          for (size_t ec = 1; ec <= N_enzyme_measurement; ++ec) {
            current_statement__ = 44;
            lp_accum__.add(
              lognormal_lpdf<false>(yenz[(ec - 1)],
                stan::math::log(
                  enzyme_concentration[(experiment_yenz[(ec - 1)] - 1)][
                  (enzyme_yenz[(ec - 1)] - 1)]), sigma_enz[(ec - 1)]));}
          current_statement__ = 49;
          for (size_t f = 1; f <= N_flux_measurement; ++f) {
            current_statement__ = 47;
            lp_accum__.add(
              normal_lpdf<false>(yflux[(f - 1)],
                flux[(experiment_yflux[(f - 1)] - 1)][(reaction_yflux[
                                                        (f - 1)] - 1)],
                sigma_flux[(f - 1)]));}
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "inference_model_linear_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("formation_energy", "N_mic", N_mic);
      Eigen::Matrix<double, -1, 1> formation_energy;
      formation_energy = Eigen::Matrix<double, -1, 1>(N_mic);
      
      current_statement__ = 1;
      formation_energy = in__.vector(N_mic);
      current_statement__ = 2;
      validate_non_negative_index("kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      Eigen::Matrix<double, -1, 1> kinetic_parameters;
      kinetic_parameters = Eigen::Matrix<double, -1, 1>(N_kinetic_parameters);
      
      current_statement__ = 2;
      kinetic_parameters = in__.vector(N_kinetic_parameters);
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
        current_statement__ = 2;
        assign(kinetic_parameters,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(kinetic_parameters[(sym1__ - 1)], 0),
          "assigning variable kinetic_parameters");}
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_experiment",
                                  N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_enzyme",
                                  N_enzyme);
      std::vector<Eigen::Matrix<double, -1, 1>> enzyme_concentration;
      enzyme_concentration = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme));
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 3;
        assign(enzyme_concentration,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N_enzyme), "assigning variable enzyme_concentration");}
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 3;
        for (size_t sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 3;
          assign(enzyme_concentration,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_constrain(
              enzyme_concentration[(sym1__ - 1)][(sym2__ - 1)], 0),
            "assigning variable enzyme_concentration");}}
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      std::vector<Eigen::Matrix<double, -1, 1>> conc_unbalanced;
      conc_unbalanced = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_unbalanced));
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 4;
        assign(conc_unbalanced,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N_unbalanced), "assigning variable conc_unbalanced");}
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 4;
        for (size_t sym2__ = 1; sym2__ <= N_unbalanced; ++sym2__) {
          current_statement__ = 4;
          assign(conc_unbalanced,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_constrain(
              conc_unbalanced[(sym1__ - 1)][(sym2__ - 1)], 0),
            "assigning variable conc_unbalanced");}}
      double initial_time;
      
      current_statement__ = 5;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      validate_non_negative_index("conc", "N_experiment", N_experiment);
      current_statement__ = 6;
      validate_non_negative_index("conc", "N_mic", N_mic);
      std::vector<Eigen::Matrix<double, -1, 1>> conc;
      conc = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_mic));
      
      current_statement__ = 6;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 6;
        for (size_t sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 6;
          assign(conc,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable conc");}}
      current_statement__ = 7;
      validate_non_negative_index("flux", "N_experiment", N_experiment);
      current_statement__ = 7;
      validate_non_negative_index("flux", "N_reaction", N_reaction);
      std::vector<Eigen::Matrix<double, -1, 1>> flux;
      flux = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_reaction));
      
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 7;
        for (size_t sym2__ = 1; sym2__ <= N_reaction; ++sym2__) {
          current_statement__ = 7;
          assign(flux,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable flux");}}
      current_statement__ = 8;
      validate_non_negative_index("delta_g", "N_enzyme", N_enzyme);
      Eigen::Matrix<double, -1, 1> delta_g;
      delta_g = Eigen::Matrix<double, -1, 1>(N_enzyme);
      
      current_statement__ = 8;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        current_statement__ = 8;
        assign(delta_g, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable delta_g");}
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        vars__.push_back(formation_energy[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
        vars__.push_back(kinetic_parameters[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(enzyme_concentration[(sym2__ - 1)][(sym1__ - 1)]);
        }}
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(conc_unbalanced[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      initial_time = 0;
      current_statement__ = 8;
      assign(delta_g, nil_index_list(),
        multiply(transpose(stoichiometric_matrix), formation_energy),
        "assigning variable delta_g");
      current_statement__ = 15;
      for (size_t e = 1; e <= N_experiment; ++e) {
        current_statement__ = 9;
        validate_non_negative_index("keq", "N_enzyme", N_enzyme);
        Eigen::Matrix<double, -1, 1> keq;
        keq = Eigen::Matrix<double, -1, 1>(N_enzyme);
        
        current_statement__ = 9;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 9;
          assign(keq, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable keq");}
        current_statement__ = 9;
        assign(keq, nil_index_list(),
          stan::math::exp(divide(delta_g, minus_RT)),
          "assigning variable keq");
        current_statement__ = 10;
        validate_non_negative_index("theta",
                                    "(((N_unbalanced + N_enzyme) + N_enzyme) + N_kinetic_parameters)",
                                    (((N_unbalanced + N_enzyme) + N_enzyme) +
                                      N_kinetic_parameters));
        Eigen::Matrix<double, -1, 1> theta;
        theta = Eigen::Matrix<double, -1, 1>((((N_unbalanced + N_enzyme) +
                                                N_enzyme) +
                                               N_kinetic_parameters));
        
        current_statement__ = 10;
        for (size_t sym1__ = 1;
             sym1__ <= (((N_unbalanced + N_enzyme) + N_enzyme) +
                         N_kinetic_parameters); ++sym1__) {
          current_statement__ = 10;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable theta");}
        current_statement__ = 10;
        assign(theta, nil_index_list(),
          append_row(
            append_row(
              append_row(conc_unbalanced[(e - 1)],
                enzyme_concentration[(e - 1)]), keq), kinetic_parameters),
          "assigning variable theta");
        current_statement__ = 11;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_multi(balanced_mic_ix), nil_index_list())),
          to_vector(
            rvalue(
              integrate_ode_bdf(ode_func_functor__(),
  rvalue(conc_init,
    cons_list(index_uni(e), cons_list(index_omni(), nil_index_list())),
    "conc_init"), initial_time, rep_array(timepoint, 1), to_array_1d(theta),
  xr, rep_array(0, 1), pstream__, 1e-8, 1e-12, 1e5),
              cons_list(index_uni(1),
                cons_list(index_omni(), nil_index_list())),
              "integrate_ode_bdf(ode_func, conc_init[e, :], initial_time,\n                  rep_array(timepoint, 1), to_array_1d(theta), xr,\n                  rep_array(0, 1), 1e-8, 1e-12, 1e5)")),
          "assigning variable conc");
        current_statement__ = 12;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_multi(unbalanced_mic_ix), nil_index_list())),
          conc_unbalanced[(e - 1)], "assigning variable conc");
        current_statement__ = 13;
        assign(flux, cons_list(index_uni(e), nil_index_list()),
          get_fluxes(
            to_array_1d(
              rvalue(conc,
                cons_list(index_uni(e),
                  cons_list(index_multi(balanced_mic_ix), nil_index_list())),
                "conc")), to_array_1d(theta), pstream__),
          "assigning variable flux");}
      vars__.push_back(initial_time);
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(conc[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(flux[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        vars__.push_back(delta_g[(sym1__ - 1)]);}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      current_statement__ = 16;
      validate_non_negative_index("yconc_sim", "N_conc_measurement",
                                  N_conc_measurement);
      Eigen::Matrix<double, -1, 1> yconc_sim;
      yconc_sim = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      
      current_statement__ = 16;
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 16;
        assign(yconc_sim, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable yconc_sim");}
      current_statement__ = 17;
      validate_non_negative_index("yenz_sim", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      Eigen::Matrix<double, -1, 1> yenz_sim;
      yenz_sim = Eigen::Matrix<double, -1, 1>(N_enzyme_measurement);
      
      current_statement__ = 17;
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 17;
        assign(yenz_sim, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable yenz_sim");}
      current_statement__ = 18;
      validate_non_negative_index("yflux_sim", "N_flux_measurement",
                                  N_flux_measurement);
      Eigen::Matrix<double, -1, 1> yflux_sim;
      yflux_sim = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      
      current_statement__ = 18;
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 18;
        assign(yflux_sim, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable yflux_sim");}
      current_statement__ = 19;
      validate_non_negative_index("log_like",
                                  "(N_flux_measurement + N_conc_measurement)",
                                  (N_flux_measurement + N_conc_measurement));
      Eigen::Matrix<double, -1, 1> log_like;
      log_like = Eigen::Matrix<double, -1, 1>((N_flux_measurement +
                                                N_conc_measurement));
      
      current_statement__ = 19;
      for (size_t sym1__ = 1;
           sym1__ <= (N_flux_measurement + N_conc_measurement); ++sym1__) {
        current_statement__ = 19;
        assign(log_like, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable log_like");}
      current_statement__ = 22;
      for (size_t c = 1; c <= N_conc_measurement; ++c) {
        current_statement__ = 20;
        assign(log_like,
          cons_list(index_uni((N_flux_measurement + c)), nil_index_list()),
          lognormal_lpdf<false>(yconc[(c - 1)],
            stan::math::log(
              conc[(experiment_yconc[(c - 1)] - 1)][(mic_ix_yconc[(c - 1)] -
                                                      1)]),
            sigma_conc[(c - 1)]), "assigning variable log_like");}
      current_statement__ = 25;
      for (size_t f = 1; f <= N_flux_measurement; ++f) {
        current_statement__ = 23;
        assign(log_like, cons_list(index_uni(f), nil_index_list()),
          normal_lpdf<false>(yflux[(f - 1)],
            flux[(experiment_yflux[(f - 1)] - 1)][(reaction_yflux[(f - 1)] -
                                                    1)], sigma_flux[(f - 1)]),
          "assigning variable log_like");}
      current_statement__ = 28;
      for (size_t c = 1; c <= N_conc_measurement; ++c) {
        current_statement__ = 26;
        assign(yconc_sim, cons_list(index_uni(c), nil_index_list()),
          lognormal_rng(
            stan::math::log(
              conc[(experiment_yconc[(c - 1)] - 1)][(mic_ix_yconc[(c - 1)] -
                                                      1)]),
            sigma_conc[(c - 1)], base_rng__), "assigning variable yconc_sim");
      }
      current_statement__ = 31;
      for (size_t ec = 1; ec <= N_enzyme_measurement; ++ec) {
        current_statement__ = 29;
        assign(yenz_sim, cons_list(index_uni(ec), nil_index_list()),
          lognormal_rng(
            stan::math::log(
              enzyme_concentration[(experiment_yenz[(ec - 1)] - 1)][(enzyme_yenz[
                                                                    (ec - 1)]
                                                                    - 1)]),
            sigma_enz[(ec - 1)], base_rng__), "assigning variable yenz_sim");
      }
      current_statement__ = 34;
      for (size_t f = 1; f <= N_flux_measurement; ++f) {
        current_statement__ = 32;
        assign(yflux_sim, cons_list(index_uni(f), nil_index_list()),
          normal_rng(
            flux[(experiment_yflux[(f - 1)] - 1)][(reaction_yflux[(f - 1)] -
                                                    1)], sigma_flux[(f - 1)],
            base_rng__), "assigning variable yflux_sim");}
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        vars__.push_back(yconc_sim[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        vars__.push_back(yenz_sim[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        vars__.push_back(yflux_sim[(sym1__ - 1)]);}
      for (size_t sym1__ = 1;
           sym1__ <= (N_flux_measurement + N_conc_measurement); ++sym1__) {
        vars__.push_back(log_like[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      current_statement__ = 1;
      validate_non_negative_index("formation_energy", "N_mic", N_mic);
      Eigen::Matrix<double, -1, 1> formation_energy;
      formation_energy = Eigen::Matrix<double, -1, 1>(N_mic);
      
      {
        std::vector<local_scalar_t__> formation_energy_flat__;
        current_statement__ = 1;
        assign(formation_energy_flat__, nil_index_list(),
          context__.vals_r("formation_energy"),
          "assigning variable formation_energy_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 1;
          assign(formation_energy,
            cons_list(index_uni(sym1__), nil_index_list()),
            formation_energy_flat__[(pos__ - 1)],
            "assigning variable formation_energy");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 2;
      validate_non_negative_index("kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      Eigen::Matrix<double, -1, 1> kinetic_parameters;
      kinetic_parameters = Eigen::Matrix<double, -1, 1>(N_kinetic_parameters);
      
      {
        std::vector<local_scalar_t__> kinetic_parameters_flat__;
        current_statement__ = 2;
        assign(kinetic_parameters_flat__, nil_index_list(),
          context__.vals_r("kinetic_parameters"),
          "assigning variable kinetic_parameters_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
          current_statement__ = 2;
          assign(kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            kinetic_parameters_flat__[(pos__ - 1)],
            "assigning variable kinetic_parameters");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
        current_statement__ = 2;
        assign(kinetic_parameters,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(kinetic_parameters[(sym1__ - 1)], 0),
          "assigning variable kinetic_parameters");}
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_experiment",
                                  N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("enzyme_concentration", "N_enzyme",
                                  N_enzyme);
      std::vector<Eigen::Matrix<double, -1, 1>> enzyme_concentration;
      enzyme_concentration = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme));
      
      {
        std::vector<local_scalar_t__> enzyme_concentration_flat__;
        current_statement__ = 3;
        assign(enzyme_concentration_flat__, nil_index_list(),
          context__.vals_r("enzyme_concentration"),
          "assigning variable enzyme_concentration_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 3;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 3;
            assign(enzyme_concentration,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              enzyme_concentration_flat__[(pos__ - 1)],
              "assigning variable enzyme_concentration");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 3;
        for (size_t sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 3;
          assign(enzyme_concentration,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_free(
              enzyme_concentration[(sym1__ - 1)][(sym2__ - 1)], 0),
            "assigning variable enzyme_concentration");}}
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 4;
      validate_non_negative_index("conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      std::vector<Eigen::Matrix<double, -1, 1>> conc_unbalanced;
      conc_unbalanced = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_unbalanced));
      
      {
        std::vector<local_scalar_t__> conc_unbalanced_flat__;
        current_statement__ = 4;
        assign(conc_unbalanced_flat__, nil_index_list(),
          context__.vals_r("conc_unbalanced"),
          "assigning variable conc_unbalanced_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 4;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 4;
            assign(conc_unbalanced,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              conc_unbalanced_flat__[(pos__ - 1)],
              "assigning variable conc_unbalanced");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 4;
        for (size_t sym2__ = 1; sym2__ <= N_unbalanced; ++sym2__) {
          current_statement__ = 4;
          assign(conc_unbalanced,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_free(conc_unbalanced[(sym1__ - 1)][(sym2__ - 1)],
              0), "assigning variable conc_unbalanced");}}
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        vars__.push_back(formation_energy[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
        vars__.push_back(kinetic_parameters[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(enzyme_concentration[(sym2__ - 1)][(sym1__ - 1)]);
        }}
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          vars__.push_back(conc_unbalanced[(sym2__ - 1)][(sym1__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("formation_energy");
    names__.push_back("kinetic_parameters");
    names__.push_back("enzyme_concentration");
    names__.push_back("conc_unbalanced");
    names__.push_back("initial_time");
    names__.push_back("conc");
    names__.push_back("flux");
    names__.push_back("delta_g");
    names__.push_back("yconc_sim");
    names__.push_back("yenz_sim");
    names__.push_back("yflux_sim");
    names__.push_back("log_like");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(N_mic);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_kinetic_parameters);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_enzyme);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_unbalanced);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_mic);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_reaction);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_enzyme);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_conc_measurement);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_enzyme_measurement);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_flux_measurement);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((N_flux_measurement + N_conc_measurement));
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
      {
        param_names__.push_back(std::string() + "formation_energy" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
      {
        param_names__.push_back(std::string() + "kinetic_parameters" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.push_back(std::string() + "enzyme_concentration" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.push_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      param_names__.push_back(std::string() + "initial_time");
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.push_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.push_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          param_names__.push_back(std::string() + "delta_g" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yconc_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yenz_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yflux_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1;
           sym1__ <= (N_flux_measurement + N_conc_measurement); ++sym1__) {
        {
          param_names__.push_back(std::string() + "log_like" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
      {
        param_names__.push_back(std::string() + "formation_energy" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
      {
        param_names__.push_back(std::string() + "kinetic_parameters" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.push_back(std::string() + "enzyme_concentration" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.push_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      param_names__.push_back(std::string() + "initial_time");
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.push_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.push_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          param_names__.push_back(std::string() + "delta_g" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yconc_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yenz_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.push_back(std::string() + "yflux_sim" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1;
           sym1__ <= (N_flux_measurement + N_conc_measurement); ++sym1__) {
        {
          param_names__.push_back(std::string() + "log_like" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"formation_energy\",\"type\":{\"name\":\"vector\",\"length\":" << N_mic << "},\"block\":\"parameters\"},{\"name\":\"kinetic_parameters\",\"type\":{\"name\":\"vector\",\"length\":" << N_kinetic_parameters << "},\"block\":\"parameters\"},{\"name\":\"enzyme_concentration\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_enzyme << "}},\"block\":\"parameters\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_unbalanced << "}},\"block\":\"parameters\"},{\"name\":\"initial_time\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_mic << "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_reaction << "}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_g\",\"type\":{\"name\":\"vector\",\"length\":" << N_enzyme << "},\"block\":\"transformed_parameters\"},{\"name\":\"yconc_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_conc_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"yenz_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_enzyme_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"yflux_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_flux_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"log_like\",\"type\":{\"name\":\"vector\",\"length\":" << (N_flux_measurement + N_conc_measurement) << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"formation_energy\",\"type\":{\"name\":\"vector\",\"length\":" << N_mic << "},\"block\":\"parameters\"},{\"name\":\"kinetic_parameters\",\"type\":{\"name\":\"vector\",\"length\":" << N_kinetic_parameters << "},\"block\":\"parameters\"},{\"name\":\"enzyme_concentration\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_enzyme << "}},\"block\":\"parameters\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_unbalanced << "}},\"block\":\"parameters\"},{\"name\":\"initial_time\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_mic << "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N_reaction << "}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_g\",\"type\":{\"name\":\"vector\",\"length\":" << N_enzyme << "},\"block\":\"transformed_parameters\"},{\"name\":\"yconc_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_conc_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"yenz_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_enzyme_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"yflux_sim\",\"type\":{\"name\":\"vector\",\"length\":" << N_flux_measurement << "},\"block\":\"generated_quantities\"},{\"name\":\"log_like\",\"type\":{\"name\":\"vector\",\"length\":" << (N_flux_measurement + N_conc_measurement) << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef inference_model_linear_model_namespace::inference_model_linear_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


