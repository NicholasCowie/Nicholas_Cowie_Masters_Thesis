
// Code generated by stanc f556d0d
#include <stan/model/model_header.hpp>
namespace validate_model_yeast_ethanol_fx_no_split_compartment_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 360, column 2 to column 13)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 363, column 2 to column 55)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 364, column 2 to column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 365, column 2 to column 24)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 368, column 4 to column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 369, column 4 to line 370, column 101)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 371, column 4 to column 89)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 372, column 4 to line 381, column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 383, column 6 to column 98)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 382, column 28 to line 384, column 5)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 382, column 4 to line 384, column 5)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 367, column 27 to line 385, column 3)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 367, column 2 to line 385, column 3)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 388, column 2 to column 38)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 332, column 2 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 333, column 2 to column 28)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 334, column 2 to column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 335, column 2 to column 26)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 336, column 2 to column 24)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 337, column 2 to column 28)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 338, column 2 to column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 339, column 2 to column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 340, column 2 to column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 341, column 2 to column 28)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 342, column 2 to column 27)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 344, column 2 to column 59)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 345, column 2 to column 63)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 347, column 2 to column 59)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 348, column 2 to column 63)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 349, column 2 to column 46)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 350, column 2 to column 27)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 352, column 2 to column 40)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 355, column 2 to column 13)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 356, column 2 to column 12)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 357, column 2 to column 38)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 3, column 2 to column 27)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 2, column 52 to line 4, column 1)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 13, column 2 to line 14, column 86)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 15, column 2 to line 16, column 88)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 17, column 2 to column 86)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 18, column 2 to column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 12, column 45 to line 19, column 1)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 22, column 2 to column 15)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 21, column 37 to line 23, column 1)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 26, column 2 to column 27)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 25, column 74 to line 27, column 1)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 30, column 2 to column 22)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 31, column 2 to line 36, column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 38, column 0 to line 40, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 43, column 0 to column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 44, column 2 to line 49, column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 51, column 0 to line 53, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 56, column 0 to column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 57, column 2 to line 62, column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 64, column 0 to line 66, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 69, column 0 to column 32)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 72, column 2 to line 77, column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 79, column 0 to line 81, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 84, column 0 to column 32)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 87, column 2 to line 92, column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 94, column 0 to line 96, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 99, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 100, column 2 to line 105, column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 107, column 0 to line 109, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 112, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 113, column 2 to line 118, column 51)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 120, column 0 to line 122, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 125, column 0 to column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 126, column 2 to line 131, column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 133, column 0 to line 135, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 138, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 139, column 2 to line 144, column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 146, column 0 to line 148, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 151, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 152, column 2 to line 157, column 34)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 159, column 0 to line 161, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 164, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 165, column 2 to line 170, column 53)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 172, column 0 to line 174, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 177, column 0 to column 22)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 178, column 2 to line 183, column 54)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 185, column 0 to line 187, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 190, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 191, column 2 to line 196, column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 198, column 0 to line 200, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 203, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 204, column 2 to line 209, column 54)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 211, column 0 to line 213, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 216, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 217, column 2 to line 222, column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 224, column 0 to line 226, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 229, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 230, column 2 to line 235, column 36)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 237, column 0 to line 239, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 242, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 243, column 2 to line 248, column 54)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 250, column 0 to line 252, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 255, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 256, column 2 to line 261, column 53)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 263, column 0 to line 265, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 268, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 269, column 2 to line 274, column 54)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 276, column 0 to line 278, column 20)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 281, column 0 to column 21)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 282, column 2 to column 98)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 283, column 2 to column 98)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 284, column 2 to column 106)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 285, column 2 to line 306, column 5)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 29, column 39 to line 307, column 1)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 309, column 2 to column 39)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 310, column 2 to line 327, column 4)",
                                                      " (in '/Users/nicow/Models/data/july-2020/validate_model_yeast_ethanol_fx_no_split_compartment.stan', line 308, column 66 to line 328, column 1)"};


template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
modular_rate_law(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
                 std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 36;
    return (Tr / (Dr + Dr_reg));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct modular_rate_law_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
           std::ostream* pstream__)  const 
{
return modular_rate_law(Tr, Dr, Dr_reg, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type
get_regulatory_effect(const std::vector<T0__>& activator_concentration,
                      const std::vector<T1__>& inhibitor_concentration,
                      const T2__& free_enzyme_ratio,
                      const std::vector<T3__>& dissociation_constant_r,
                      const std::vector<T4__>& dissociation_constant_t,
                      const T5__& transfer_constant,
                      const T6__& num_subunits, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ Q_num;
    
    current_statement__ = 38;
    Q_num = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 38;
    Q_num = (logical_eq(size(inhibitor_concentration), 0) ?
               stan::math::promote_scalar<local_scalar_t__>(1) :
               stan::math::promote_scalar<local_scalar_t__>((1 +
                                                              sum(
                                                                elt_divide(
                                                                  to_vector(
                                                                    inhibitor_concentration),
                                                                  to_vector(
                                                                    dissociation_constant_t))))));
    local_scalar_t__ Q_denom;
    
    current_statement__ = 39;
    Q_denom = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 39;
    Q_denom = (logical_eq(size(activator_concentration), 0) ?
                 stan::math::promote_scalar<local_scalar_t__>(1) :
                 stan::math::promote_scalar<local_scalar_t__>((1 +
                                                                sum(
                                                                  elt_divide(
                                                                    to_vector(
                                                                    activator_concentration),
                                                                    to_vector(
                                                                    dissociation_constant_r))))));
    local_scalar_t__ Q;
    
    current_statement__ = 40;
    Q = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 40;
    Q = (transfer_constant *
          pow(((free_enzyme_ratio * Q_num) / Q_denom), num_subunits));
    current_statement__ = 41;
    return inv((1 + Q));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_regulatory_effect_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type
operator()(const std::vector<T0__>& activator_concentration,
           const std::vector<T1__>& inhibitor_concentration,
           const T2__& free_enzyme_ratio,
           const std::vector<T3__>& dissociation_constant_r,
           const std::vector<T4__>& dissociation_constant_t,
           const T5__& transfer_constant, const T6__& num_subunits,
           std::ostream* pstream__)  const 
{
return get_regulatory_effect(activator_concentration,
         inhibitor_concentration, free_enzyme_ratio, dissociation_constant_r,
         dissociation_constant_t, transfer_constant, num_subunits, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
irr_mass_action(const T0__& A, const T1__& V1, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 43;
    return (A * V1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct irr_mass_action_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& A, const T1__& V1, std::ostream* pstream__)  const 
{
return irr_mass_action(A, V1, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
get_free_enzyme_ratio_modular_rate_law(const T0__& Tr, const T1__& Dr,
                                       const T2__& Dr_reg,
                                       std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 45;
    return (1 / (Dr + Dr_reg));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_free_enzyme_ratio_modular_rate_law_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& Tr, const T1__& Dr, const T2__& Dr_reg,
           std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio_modular_rate_law(Tr, Dr, Dr_reg, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
get_fluxes(const std::vector<T0__>& m, const std::vector<T1__>& p,
           std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 47;
    validate_non_negative_index("empty_array", "0", 0);
    std::vector<local_scalar_t__> empty_array;
    empty_array = std::vector<local_scalar_t__>(0, 0);
    
    local_scalar_t__ Tr_PGI;
    
    current_statement__ = 48;
    Tr_PGI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 48;
    Tr_PGI = (((p[(9 - 1)] * p[(55 - 1)]) *
                pow((p[(7 - 1)] / p[(53 - 1)]), (-1 * -1))) -
               (((((p[(9 - 1)] * p[(55 - 1)]) / p[(31 - 1)]) *
                   pow(p[(53 - 1)], -1)) * pow(p[(54 - 1)], 1)) *
                 pow((m[(3 - 1)] / p[(54 - 1)]), 1)));
    local_scalar_t__ Dr_PGI;
    
    current_statement__ = 49;
    Dr_PGI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 49;
    Dr_PGI = ((pow((1 + (p[(7 - 1)] / p[(53 - 1)])), (-1 * -1)) +
                pow((1 + (m[(3 - 1)] / p[(54 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_PGI;
    
    current_statement__ = 50;
    Dr_reg_PGI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 50;
    Dr_reg_PGI = 0;
    local_scalar_t__ Tr_PFK;
    
    current_statement__ = 51;
    Tr_PFK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 51;
    Tr_PFK = ((((p[(10 - 1)] * p[(60 - 1)]) *
                 pow((m[(3 - 1)] / p[(56 - 1)]), (-1 * -1))) *
                pow((p[(1 - 1)] / p[(57 - 1)]), (-1 * -1))) -
               ((((((((p[(10 - 1)] * p[(60 - 1)]) / p[(32 - 1)]) *
                      pow(p[(56 - 1)], -1)) * pow(p[(57 - 1)], -1)) *
                    pow(p[(58 - 1)], 1)) * pow(p[(59 - 1)], 1)) *
                  pow((m[(4 - 1)] / p[(58 - 1)]), 1)) *
                 pow((p[(2 - 1)] / p[(59 - 1)]), 1)));
    local_scalar_t__ Dr_PFK;
    
    current_statement__ = 52;
    Dr_PFK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 52;
    Dr_PFK = (((pow((1 + (m[(3 - 1)] / p[(56 - 1)])), (-1 * -1)) *
                 pow((1 + (p[(1 - 1)] / p[(57 - 1)])), (-1 * -1))) +
                (pow((1 + (m[(4 - 1)] / p[(58 - 1)])), 1) *
                  pow((1 + (p[(2 - 1)] / p[(59 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_PFK;
    
    current_statement__ = 53;
    Dr_reg_PFK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 53;
    Dr_reg_PFK = 0;
    local_scalar_t__ Tr_FBA;
    
    current_statement__ = 54;
    Tr_FBA = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 54;
    Tr_FBA = (((p[(11 - 1)] * p[(67 - 1)]) *
                pow((m[(4 - 1)] / p[(64 - 1)]), (-1 * -1))) -
               (((((((p[(11 - 1)] * p[(67 - 1)]) / p[(33 - 1)]) *
                     pow(p[(64 - 1)], -1)) * pow(p[(65 - 1)], 1)) *
                   pow(p[(66 - 1)], 1)) * pow((m[(7 - 1)] / p[(65 - 1)]), 1))
                 * pow((m[(5 - 1)] / p[(66 - 1)]), 1)));
    local_scalar_t__ Dr_FBA;
    
    current_statement__ = 55;
    Dr_FBA = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 55;
    Dr_FBA = ((pow((1 + (m[(4 - 1)] / p[(64 - 1)])), (-1 * -1)) +
                (pow((1 + (m[(7 - 1)] / p[(65 - 1)])), 1) *
                  pow((1 + (m[(5 - 1)] / p[(66 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_FBA;
    
    current_statement__ = 56;
    Dr_reg_FBA = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 56;
    Dr_reg_FBA = (m[(5 - 1)] / p[(68 - 1)]);
    local_scalar_t__ Tr_TPI;
    
    current_statement__ = 57;
    Tr_TPI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 57;
    Tr_TPI = (((p[(12 - 1)] * p[(71 - 1)]) *
                pow((m[(7 - 1)] / p[(69 - 1)]), (-1 * -1))) -
               (((((p[(12 - 1)] * p[(71 - 1)]) / p[(34 - 1)]) *
                   pow(p[(69 - 1)], -1)) * pow(p[(70 - 1)], 1)) *
                 pow((m[(5 - 1)] / p[(70 - 1)]), 1)));
    local_scalar_t__ Dr_TPI;
    
    current_statement__ = 58;
    Dr_TPI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 58;
    Dr_TPI = ((pow((1 + (m[(7 - 1)] / p[(69 - 1)])), (-1 * -1)) +
                pow((1 + (m[(5 - 1)] / p[(70 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_TPI;
    
    current_statement__ = 59;
    Dr_reg_TPI = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 59;
    Dr_reg_TPI = (m[(5 - 1)] / p[(72 - 1)]);
    local_scalar_t__ Tr_TDH1;
    
    current_statement__ = 60;
    Tr_TDH1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 60;
    Tr_TDH1 = (((((p[(13 - 1)] * p[(78 - 1)]) *
                   pow((m[(5 - 1)] / p[(73 - 1)]), (-1 * -1))) *
                  pow((p[(3 - 1)] / p[(74 - 1)]), (-1 * -1))) *
                 pow((p[(8 - 1)] / p[(75 - 1)]), (-1 * -1))) -
                (((((((((p[(13 - 1)] * p[(78 - 1)]) / p[(35 - 1)]) *
                        pow(p[(73 - 1)], -1)) * pow(p[(74 - 1)], -1)) *
                      pow(p[(75 - 1)], -1)) * pow(p[(76 - 1)], 1)) *
                    pow(p[(77 - 1)], 1)) *
                   pow((p[(4 - 1)] / p[(76 - 1)]), 1)) *
                  pow((m[(6 - 1)] / p[(77 - 1)]), 1)));
    local_scalar_t__ Dr_TDH1;
    
    current_statement__ = 61;
    Dr_TDH1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 61;
    Dr_TDH1 = ((((pow((1 + (m[(5 - 1)] / p[(73 - 1)])), (-1 * -1)) *
                   pow((1 + (p[(3 - 1)] / p[(74 - 1)])), (-1 * -1))) *
                  pow((1 + (p[(8 - 1)] / p[(75 - 1)])), (-1 * -1))) +
                 (pow((1 + (p[(4 - 1)] / p[(76 - 1)])), 1) *
                   pow((1 + (m[(6 - 1)] / p[(77 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_TDH1;
    
    current_statement__ = 62;
    Dr_reg_TDH1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 62;
    Dr_reg_TDH1 = 0;
    local_scalar_t__ Tr_TDH3;
    
    current_statement__ = 63;
    Tr_TDH3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 63;
    Tr_TDH3 = (((((p[(14 - 1)] * p[(84 - 1)]) *
                   pow((m[(5 - 1)] / p[(79 - 1)]), (-1 * -1))) *
                  pow((p[(3 - 1)] / p[(80 - 1)]), (-1 * -1))) *
                 pow((p[(8 - 1)] / p[(81 - 1)]), (-1 * -1))) -
                (((((((((p[(14 - 1)] * p[(84 - 1)]) / p[(36 - 1)]) *
                        pow(p[(79 - 1)], -1)) * pow(p[(80 - 1)], -1)) *
                      pow(p[(81 - 1)], -1)) * pow(p[(82 - 1)], 1)) *
                    pow(p[(83 - 1)], 1)) *
                   pow((p[(4 - 1)] / p[(82 - 1)]), 1)) *
                  pow((m[(6 - 1)] / p[(83 - 1)]), 1)));
    local_scalar_t__ Dr_TDH3;
    
    current_statement__ = 64;
    Dr_TDH3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 64;
    Dr_TDH3 = ((((pow((1 + (m[(5 - 1)] / p[(79 - 1)])), (-1 * -1)) *
                   pow((1 + (p[(3 - 1)] / p[(80 - 1)])), (-1 * -1))) *
                  pow((1 + (p[(8 - 1)] / p[(81 - 1)])), (-1 * -1))) +
                 (pow((1 + (p[(4 - 1)] / p[(82 - 1)])), 1) *
                   pow((1 + (m[(6 - 1)] / p[(83 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_TDH3;
    
    current_statement__ = 65;
    Dr_reg_TDH3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 65;
    Dr_reg_TDH3 = 0;
    local_scalar_t__ Tr_PGK;
    
    current_statement__ = 66;
    Tr_PGK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 66;
    Tr_PGK = ((((p[(15 - 1)] * p[(89 - 1)]) *
                 pow((p[(2 - 1)] / p[(85 - 1)]), (-1 * -1))) *
                pow((m[(6 - 1)] / p[(86 - 1)]), (-1 * -1))) -
               ((((((((p[(15 - 1)] * p[(89 - 1)]) / p[(37 - 1)]) *
                      pow(p[(85 - 1)], -1)) * pow(p[(86 - 1)], -1)) *
                    pow(p[(87 - 1)], 1)) * pow(p[(88 - 1)], 1)) *
                  pow((m[(1 - 1)] / p[(87 - 1)]), 1)) *
                 pow((p[(1 - 1)] / p[(88 - 1)]), 1)));
    local_scalar_t__ Dr_PGK;
    
    current_statement__ = 67;
    Dr_PGK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 67;
    Dr_PGK = (((pow((1 + (p[(2 - 1)] / p[(85 - 1)])), (-1 * -1)) *
                 pow((1 + (m[(6 - 1)] / p[(86 - 1)])), (-1 * -1))) +
                (pow((1 + (m[(1 - 1)] / p[(87 - 1)])), 1) *
                  pow((1 + (p[(1 - 1)] / p[(88 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_PGK;
    
    current_statement__ = 68;
    Dr_reg_PGK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 68;
    Dr_reg_PGK = 0;
    local_scalar_t__ Tr_GPM1;
    
    current_statement__ = 69;
    Tr_GPM1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 69;
    Tr_GPM1 = (((p[(16 - 1)] * p[(94 - 1)]) *
                 pow((m[(1 - 1)] / p[(92 - 1)]), (-1 * -1))) -
                (((((p[(16 - 1)] * p[(94 - 1)]) / p[(38 - 1)]) *
                    pow(p[(92 - 1)], -1)) * pow(p[(93 - 1)], 1)) *
                  pow((m[(2 - 1)] / p[(93 - 1)]), 1)));
    local_scalar_t__ Dr_GPM1;
    
    current_statement__ = 70;
    Dr_GPM1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 70;
    Dr_GPM1 = ((pow((1 + (m[(1 - 1)] / p[(92 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(2 - 1)] / p[(93 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_GPM1;
    
    current_statement__ = 71;
    Dr_reg_GPM1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 71;
    Dr_reg_GPM1 = 0;
    local_scalar_t__ Tr_ENO1;
    
    current_statement__ = 72;
    Tr_ENO1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 72;
    Tr_ENO1 = (((p[(17 - 1)] * p[(97 - 1)]) *
                 pow((m[(2 - 1)] / p[(95 - 1)]), (-1 * -1))) -
                (((((p[(17 - 1)] * p[(97 - 1)]) / p[(39 - 1)]) *
                    pow(p[(95 - 1)], -1)) * pow(p[(96 - 1)], 1)) *
                  pow((m[(8 - 1)] / p[(96 - 1)]), 1)));
    local_scalar_t__ Dr_ENO1;
    
    current_statement__ = 73;
    Dr_ENO1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 73;
    Dr_ENO1 = ((pow((1 + (m[(2 - 1)] / p[(95 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(8 - 1)] / p[(96 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_ENO1;
    
    current_statement__ = 74;
    Dr_reg_ENO1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 74;
    Dr_reg_ENO1 = 0;
    local_scalar_t__ Tr_ENO2;
    
    current_statement__ = 75;
    Tr_ENO2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 75;
    Tr_ENO2 = (((p[(18 - 1)] * p[(100 - 1)]) *
                 pow((m[(2 - 1)] / p[(98 - 1)]), (-1 * -1))) -
                (((((p[(18 - 1)] * p[(100 - 1)]) / p[(40 - 1)]) *
                    pow(p[(98 - 1)], -1)) * pow(p[(99 - 1)], 1)) *
                  pow((m[(8 - 1)] / p[(99 - 1)]), 1)));
    local_scalar_t__ Dr_ENO2;
    
    current_statement__ = 76;
    Dr_ENO2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 76;
    Dr_ENO2 = ((pow((1 + (m[(2 - 1)] / p[(98 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(8 - 1)] / p[(99 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_ENO2;
    
    current_statement__ = 77;
    Dr_reg_ENO2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 77;
    Dr_reg_ENO2 = 0;
    local_scalar_t__ Tr_CDC19;
    
    current_statement__ = 78;
    Tr_CDC19 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 78;
    Tr_CDC19 = ((((p[(19 - 1)] * p[(105 - 1)]) *
                   pow((m[(8 - 1)] / p[(101 - 1)]), (-1 * -1))) *
                  pow((p[(2 - 1)] / p[(102 - 1)]), (-1 * -1))) -
                 ((((((((p[(19 - 1)] * p[(105 - 1)]) / p[(41 - 1)]) *
                        pow(p[(101 - 1)], -1)) * pow(p[(102 - 1)], -1)) *
                      pow(p[(103 - 1)], 1)) * pow(p[(104 - 1)], 1)) *
                    pow((p[(1 - 1)] / p[(103 - 1)]), 1)) *
                   pow((m[(9 - 1)] / p[(104 - 1)]), 1)));
    local_scalar_t__ Dr_CDC19;
    
    current_statement__ = 79;
    Dr_CDC19 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 79;
    Dr_CDC19 = (((pow((1 + (m[(8 - 1)] / p[(101 - 1)])), (-1 * -1)) *
                   pow((1 + (p[(2 - 1)] / p[(102 - 1)])), (-1 * -1))) +
                  (pow((1 + (p[(1 - 1)] / p[(103 - 1)])), 1) *
                    pow((1 + (m[(9 - 1)] / p[(104 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_CDC19;
    
    current_statement__ = 80;
    Dr_reg_CDC19 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 80;
    Dr_reg_CDC19 = 0;
    local_scalar_t__ Tr_ZWF1;
    
    current_statement__ = 81;
    Tr_ZWF1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 81;
    Tr_ZWF1 = ((((p[(20 - 1)] * p[(112 - 1)]) *
                  pow((p[(5 - 1)] / p[(108 - 1)]), (-1 * -1))) *
                 pow((p[(7 - 1)] / p[(109 - 1)]), (-1 * -1))) -
                ((((((((p[(20 - 1)] * p[(112 - 1)]) / p[(42 - 1)]) *
                       pow(p[(108 - 1)], -1)) * pow(p[(109 - 1)], -1)) *
                     pow(p[(110 - 1)], 1)) * pow(p[(111 - 1)], 1)) *
                   pow((m[(10 - 1)] / p[(110 - 1)]), 1)) *
                  pow((p[(6 - 1)] / p[(111 - 1)]), 1)));
    local_scalar_t__ Dr_ZWF1;
    
    current_statement__ = 82;
    Dr_ZWF1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 82;
    Dr_ZWF1 = (((pow((1 + (p[(5 - 1)] / p[(108 - 1)])), (-1 * -1)) *
                  pow((1 + (p[(7 - 1)] / p[(109 - 1)])), (-1 * -1))) +
                 (pow((1 + (m[(10 - 1)] / p[(110 - 1)])), 1) *
                   pow((1 + (p[(6 - 1)] / p[(111 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_ZWF1;
    
    current_statement__ = 83;
    Dr_reg_ZWF1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 83;
    Dr_reg_ZWF1 = 0;
    local_scalar_t__ Tr_SOL3;
    
    current_statement__ = 84;
    Tr_SOL3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 84;
    Tr_SOL3 = (((p[(21 - 1)] * p[(115 - 1)]) *
                 pow((m[(10 - 1)] / p[(113 - 1)]), (-1 * -1))) -
                (((((p[(21 - 1)] * p[(115 - 1)]) / p[(43 - 1)]) *
                    pow(p[(113 - 1)], -1)) * pow(p[(114 - 1)], 1)) *
                  pow((m[(11 - 1)] / p[(114 - 1)]), 1)));
    local_scalar_t__ Dr_SOL3;
    
    current_statement__ = 85;
    Dr_SOL3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 85;
    Dr_SOL3 = ((pow((1 + (m[(10 - 1)] / p[(113 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(11 - 1)] / p[(114 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_SOL3;
    
    current_statement__ = 86;
    Dr_reg_SOL3 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 86;
    Dr_reg_SOL3 = 0;
    local_scalar_t__ Tr_GND1;
    
    current_statement__ = 87;
    Tr_GND1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 87;
    Tr_GND1 = ((((p[(22 - 1)] * p[(120 - 1)]) *
                  pow((m[(11 - 1)] / p[(116 - 1)]), (-1 * -1))) *
                 pow((p[(5 - 1)] / p[(117 - 1)]), (-1 * -1))) -
                ((((((((p[(22 - 1)] * p[(120 - 1)]) / p[(44 - 1)]) *
                       pow(p[(116 - 1)], -1)) * pow(p[(117 - 1)], -1)) *
                     pow(p[(118 - 1)], 1)) * pow(p[(119 - 1)], 1)) *
                   pow((p[(6 - 1)] / p[(118 - 1)]), 1)) *
                  pow((m[(12 - 1)] / p[(119 - 1)]), 1)));
    local_scalar_t__ Dr_GND1;
    
    current_statement__ = 88;
    Dr_GND1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 88;
    Dr_GND1 = (((pow((1 + (m[(11 - 1)] / p[(116 - 1)])), (-1 * -1)) *
                  pow((1 + (p[(5 - 1)] / p[(117 - 1)])), (-1 * -1))) +
                 (pow((1 + (p[(6 - 1)] / p[(118 - 1)])), 1) *
                   pow((1 + (m[(12 - 1)] / p[(119 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_GND1;
    
    current_statement__ = 89;
    Dr_reg_GND1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 89;
    Dr_reg_GND1 = 0;
    local_scalar_t__ Tr_RPE1;
    
    current_statement__ = 90;
    Tr_RPE1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 90;
    Tr_RPE1 = (((p[(23 - 1)] * p[(123 - 1)]) *
                 pow((m[(12 - 1)] / p[(121 - 1)]), (-1 * -1))) -
                (((((p[(23 - 1)] * p[(123 - 1)]) / p[(45 - 1)]) *
                    pow(p[(121 - 1)], -1)) * pow(p[(122 - 1)], 1)) *
                  pow((m[(15 - 1)] / p[(122 - 1)]), 1)));
    local_scalar_t__ Dr_RPE1;
    
    current_statement__ = 91;
    Dr_RPE1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 91;
    Dr_RPE1 = ((pow((1 + (m[(12 - 1)] / p[(121 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(15 - 1)] / p[(122 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_RPE1;
    
    current_statement__ = 92;
    Dr_reg_RPE1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 92;
    Dr_reg_RPE1 = 0;
    local_scalar_t__ Tr_RKI1;
    
    current_statement__ = 93;
    Tr_RKI1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 93;
    Tr_RKI1 = (((p[(24 - 1)] * p[(126 - 1)]) *
                 pow((m[(12 - 1)] / p[(124 - 1)]), (-1 * -1))) -
                (((((p[(24 - 1)] * p[(126 - 1)]) / p[(46 - 1)]) *
                    pow(p[(124 - 1)], -1)) * pow(p[(125 - 1)], 1)) *
                  pow((m[(13 - 1)] / p[(125 - 1)]), 1)));
    local_scalar_t__ Dr_RKI1;
    
    current_statement__ = 94;
    Dr_RKI1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 94;
    Dr_RKI1 = ((pow((1 + (m[(12 - 1)] / p[(124 - 1)])), (-1 * -1)) +
                 pow((1 + (m[(13 - 1)] / p[(125 - 1)])), 1)) - 1);
    local_scalar_t__ Dr_reg_RKI1;
    
    current_statement__ = 95;
    Dr_reg_RKI1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 95;
    Dr_reg_RKI1 = 0;
    local_scalar_t__ Tr_TKL1;
    
    current_statement__ = 96;
    Tr_TKL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 96;
    Tr_TKL1 = ((((p[(25 - 1)] * p[(131 - 1)]) *
                  pow((m[(15 - 1)] / p[(127 - 1)]), (-1 * -1))) *
                 pow((m[(13 - 1)] / p[(128 - 1)]), (-1 * -1))) -
                ((((((((p[(25 - 1)] * p[(131 - 1)]) / p[(47 - 1)]) *
                       pow(p[(127 - 1)], -1)) * pow(p[(128 - 1)], -1)) *
                     pow(p[(129 - 1)], 1)) * pow(p[(130 - 1)], 1)) *
                   pow((m[(16 - 1)] / p[(129 - 1)]), 1)) *
                  pow((m[(5 - 1)] / p[(130 - 1)]), 1)));
    local_scalar_t__ Dr_TKL1;
    
    current_statement__ = 97;
    Dr_TKL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 97;
    Dr_TKL1 = (((pow((1 + (m[(15 - 1)] / p[(127 - 1)])), (-1 * -1)) *
                  pow((1 + (m[(13 - 1)] / p[(128 - 1)])), (-1 * -1))) +
                 (pow((1 + (m[(16 - 1)] / p[(129 - 1)])), 1) *
                   pow((1 + (m[(5 - 1)] / p[(130 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_TKL1;
    
    current_statement__ = 98;
    Dr_reg_TKL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 98;
    Dr_reg_TKL1 = 0;
    local_scalar_t__ Tr_TKL2;
    
    current_statement__ = 99;
    Tr_TKL2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 99;
    Tr_TKL2 = ((((p[(26 - 1)] * p[(136 - 1)]) *
                  pow((m[(14 - 1)] / p[(132 - 1)]), (-1 * -1))) *
                 pow((m[(15 - 1)] / p[(133 - 1)]), (-1 * -1))) -
                ((((((((p[(26 - 1)] * p[(136 - 1)]) / p[(48 - 1)]) *
                       pow(p[(132 - 1)], -1)) * pow(p[(133 - 1)], -1)) *
                     pow(p[(134 - 1)], 1)) * pow(p[(135 - 1)], 1)) *
                   pow((m[(3 - 1)] / p[(134 - 1)]), 1)) *
                  pow((m[(5 - 1)] / p[(135 - 1)]), 1)));
    local_scalar_t__ Dr_TKL2;
    
    current_statement__ = 100;
    Dr_TKL2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 100;
    Dr_TKL2 = (((pow((1 + (m[(14 - 1)] / p[(132 - 1)])), (-1 * -1)) *
                  pow((1 + (m[(15 - 1)] / p[(133 - 1)])), (-1 * -1))) +
                 (pow((1 + (m[(3 - 1)] / p[(134 - 1)])), 1) *
                   pow((1 + (m[(5 - 1)] / p[(135 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_TKL2;
    
    current_statement__ = 101;
    Dr_reg_TKL2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 101;
    Dr_reg_TKL2 = 0;
    local_scalar_t__ Tr_TAL1;
    
    current_statement__ = 102;
    Tr_TAL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 102;
    Tr_TAL1 = ((((p[(27 - 1)] * p[(141 - 1)]) *
                  pow((m[(5 - 1)] / p[(137 - 1)]), (-1 * -1))) *
                 pow((m[(16 - 1)] / p[(138 - 1)]), (-1 * -1))) -
                ((((((((p[(27 - 1)] * p[(141 - 1)]) / p[(49 - 1)]) *
                       pow(p[(137 - 1)], -1)) * pow(p[(138 - 1)], -1)) *
                     pow(p[(139 - 1)], 1)) * pow(p[(140 - 1)], 1)) *
                   pow((m[(3 - 1)] / p[(139 - 1)]), 1)) *
                  pow((m[(14 - 1)] / p[(140 - 1)]), 1)));
    local_scalar_t__ Dr_TAL1;
    
    current_statement__ = 103;
    Dr_TAL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 103;
    Dr_TAL1 = (((pow((1 + (m[(5 - 1)] / p[(137 - 1)])), (-1 * -1)) *
                  pow((1 + (m[(16 - 1)] / p[(138 - 1)])), (-1 * -1))) +
                 (pow((1 + (m[(3 - 1)] / p[(139 - 1)])), 1) *
                   pow((1 + (m[(14 - 1)] / p[(140 - 1)])), 1))) - 1);
    local_scalar_t__ Dr_reg_TAL1;
    
    current_statement__ = 104;
    Dr_reg_TAL1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 104;
    Dr_reg_TAL1 = 0;
    local_scalar_t__ free_enzyme_ratio_PFK;
    
    current_statement__ = 105;
    free_enzyme_ratio_PFK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 105;
    free_enzyme_ratio_PFK = get_free_enzyme_ratio_modular_rate_law(Tr_PFK,
                              Dr_PFK, Dr_reg_PFK, pstream__);
    local_scalar_t__ free_enzyme_ratio_PGK;
    
    current_statement__ = 106;
    free_enzyme_ratio_PGK = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 106;
    free_enzyme_ratio_PGK = get_free_enzyme_ratio_modular_rate_law(Tr_PGK,
                              Dr_PGK, Dr_reg_PGK, pstream__);
    local_scalar_t__ free_enzyme_ratio_CDC19;
    
    current_statement__ = 107;
    free_enzyme_ratio_CDC19 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 107;
    free_enzyme_ratio_CDC19 = get_free_enzyme_ratio_modular_rate_law(
                                Tr_CDC19, Dr_CDC19, Dr_reg_CDC19, pstream__);
    current_statement__ = 108;
    return transpose(stan::math::to_row_vector(
             stan::math::array_builder<local_scalar_t__>()
             .add(modular_rate_law(Tr_PGI, Dr_PGI, Dr_reg_PGI, pstream__))
             .add((modular_rate_law(Tr_PFK, Dr_PFK, Dr_reg_PFK, pstream__) *
                    get_regulatory_effect(
                      stan::math::array_builder<local_scalar_t__>()
                      .add(m[(4 - 1)]).array(),
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(1 - 1)]).array(), free_enzyme_ratio_PFK,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(61 - 1)]).array(),
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(63 - 1)]).array(), p[(62 - 1)], 8, pstream__)))
             .add(modular_rate_law(Tr_FBA, Dr_FBA, Dr_reg_FBA, pstream__))
             .add(modular_rate_law(Tr_TPI, Dr_TPI, Dr_reg_TPI, pstream__))
             .add((modular_rate_law(Tr_TDH1, Dr_TDH1, Dr_reg_TDH1, pstream__)
                    +
                    modular_rate_law(Tr_TDH3, Dr_TDH3,
                      Dr_reg_TDH3, pstream__)))
             .add((modular_rate_law(Tr_PGK, Dr_PGK, Dr_reg_PGK, pstream__) *
                    get_regulatory_effect(
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(2 - 1)]).array(), empty_array,
                      free_enzyme_ratio_PGK,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(90 - 1)]).array(), empty_array, p[(91 - 1)],
                      2, pstream__)))
             .add(modular_rate_law(Tr_GPM1, Dr_GPM1, Dr_reg_GPM1, pstream__))
             .add((modular_rate_law(Tr_ENO1, Dr_ENO1, Dr_reg_ENO1, pstream__)
                    +
                    modular_rate_law(Tr_ENO2, Dr_ENO2,
                      Dr_reg_ENO2, pstream__)))
             .add((modular_rate_law(Tr_CDC19, Dr_CDC19,
                     Dr_reg_CDC19, pstream__) *
                    get_regulatory_effect(
                      stan::math::array_builder<local_scalar_t__>()
                      .add(m[(4 - 1)]).array(), empty_array,
                      free_enzyme_ratio_CDC19,
                      stan::math::array_builder<local_scalar_t__>()
                      .add(p[(106 - 1)]).array(), empty_array, p[(107 - 1)],
                      4, pstream__)))
             .add(modular_rate_law(Tr_ZWF1, Dr_ZWF1, Dr_reg_ZWF1, pstream__))
             .add(modular_rate_law(Tr_SOL3, Dr_SOL3, Dr_reg_SOL3, pstream__))
             .add(modular_rate_law(Tr_GND1, Dr_GND1, Dr_reg_GND1, pstream__))
             .add(modular_rate_law(Tr_RPE1, Dr_RPE1, Dr_reg_RPE1, pstream__))
             .add(modular_rate_law(Tr_RKI1, Dr_RKI1, Dr_reg_RKI1, pstream__))
             .add(modular_rate_law(Tr_TKL1, Dr_TKL1, Dr_reg_TKL1, pstream__))
             .add(modular_rate_law(Tr_TKL2, Dr_TKL2, Dr_reg_TKL2, pstream__))
             .add(modular_rate_law(Tr_TAL1, Dr_TAL1, Dr_reg_TAL1, pstream__))
             .add(irr_mass_action(m[(9 - 1)], p[(28 - 1)], pstream__))
             .add(irr_mass_action(m[(7 - 1)], p[(29 - 1)], pstream__))
             .add(irr_mass_action(m[(13 - 1)], p[(30 - 1)], pstream__))
             .array()));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_fluxes_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
operator()(const std::vector<T0__>& m, const std::vector<T1__>& p,
           std::ostream* pstream__)  const 
{
return get_fluxes(m, p, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
ode_func(const T0__& t, const std::vector<T1__>& m,
         const std::vector<T2__>& p, const std::vector<T3__>& xr,
         const std::vector<int>& xi, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 110;
    validate_non_negative_index("fluxes", "20", 20);
    Eigen::Matrix<local_scalar_t__, -1, 1> fluxes;
    fluxes = Eigen::Matrix<local_scalar_t__, -1, 1>(20);
    
    current_statement__ = 110;
    for (size_t sym1__ = 1; sym1__ <= 20; ++sym1__) {
      current_statement__ = 110;
      assign(fluxes, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable fluxes");
    }
    current_statement__ = 110;
    assign(fluxes, nil_index_list(), get_fluxes(m, p, pstream__),
      "assigning variable fluxes");
    current_statement__ = 111;
    return stan::math::array_builder<local_scalar_t__>()
        .add(((1 * fluxes[(6 - 1)]) - (1 * fluxes[(7 - 1)])))
        .add(((1 * fluxes[(7 - 1)]) - (1 * fluxes[(8 - 1)])))
        .add(((((1 * fluxes[(1 - 1)]) - (1 * fluxes[(2 - 1)])) +
                (1 * fluxes[(16 - 1)])) + (1 * fluxes[(17 - 1)])))
        .add(((1 * fluxes[(2 - 1)]) - (1 * fluxes[(3 - 1)])))
        .add(((((((1 * fluxes[(3 - 1)]) + (1 * fluxes[(4 - 1)])) -
                  (1 * fluxes[(5 - 1)])) + (1 * fluxes[(15 - 1)])) +
                (1 * fluxes[(16 - 1)])) - (1 * fluxes[(17 - 1)])))
        .add(((1 * fluxes[(5 - 1)]) - (1 * fluxes[(6 - 1)])))
        .add((((1 * fluxes[(3 - 1)]) - (1 * fluxes[(4 - 1)])) -
               (1 * fluxes[(19 - 1)])))
        .add(((1 * fluxes[(8 - 1)]) - (1 * fluxes[(9 - 1)])))
        .add(((1 * fluxes[(9 - 1)]) - (1 * fluxes[(18 - 1)])))
        .add(((1 * fluxes[(10 - 1)]) - (1 * fluxes[(11 - 1)])))
        .add(((1 * fluxes[(11 - 1)]) - (1 * fluxes[(12 - 1)])))
        .add((((1 * fluxes[(12 - 1)]) - (1 * fluxes[(13 - 1)])) -
               (1 * fluxes[(14 - 1)])))
        .add((((1 * fluxes[(14 - 1)]) - (1 * fluxes[(15 - 1)])) -
               (1 * fluxes[(20 - 1)])))
        .add(((-1 * fluxes[(16 - 1)]) + (1 * fluxes[(17 - 1)])))
        .add((((1 * fluxes[(13 - 1)]) - (1 * fluxes[(15 - 1)])) -
               (1 * fluxes[(16 - 1)])))
        .add(((1 * fluxes[(15 - 1)]) - (1 * fluxes[(17 - 1)]))).array();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ode_func_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
operator()(const T0__& t, const std::vector<T1__>& m,
           const std::vector<T2__>& p, const std::vector<T3__>& xr,
           const std::vector<int>& xi, std::ostream* pstream__)  const 
{
return ode_func(t, m, p, xr, xi, pstream__);
}
};

class validate_model_yeast_ethanol_fx_no_split_compartment_model : public model_base_crtp<validate_model_yeast_ethanol_fx_no_split_compartment_model> {

 private:
  int pos__;
  int N_mic;
  int N_unbalanced;
  int N_kinetic_parameters;
  int N_reaction;
  int N_enzyme;
  int N_experiment;
  int N_flux_measurement;
  int N_enzyme_measurement;
  int N_conc_measurement;
  int N_metabolite;
  int N_timepoint;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> balanced_mic_ix;
  Eigen::Matrix<double, -1, 1> kinetic_parameters;
  std::vector<Eigen::Matrix<double, -1, 1>> enzyme_concentration;
  std::vector<std::vector<double>> conc_sim;
  Eigen::Matrix<double, -1, 1> delta_g;
  std::vector<double> timepoints;
  std::vector<double> xr;
  std::vector<int> xi;
  double minus_RT;
 
 public:
  ~validate_model_yeast_ethanol_fx_no_split_compartment_model() { }
  
  std::string model_name() const { return "validate_model_yeast_ethanol_fx_no_split_compartment_model"; }
  
  validate_model_yeast_ethanol_fx_no_split_compartment_model(stan::io::var_context& context__,
                                                             unsigned int random_seed__ = 0,
                                                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "validate_model_yeast_ethanol_fx_no_split_compartment_model_namespace::validate_model_yeast_ethanol_fx_no_split_compartment_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","N_mic","int",
          context__.to_vec());
      
      current_statement__ = 15;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      context__.validate_dims("data initialization","N_unbalanced","int",
          context__.to_vec());
      
      current_statement__ = 16;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      context__.validate_dims("data initialization","N_kinetic_parameters",
          "int",context__.to_vec());
      
      current_statement__ = 17;
      N_kinetic_parameters = context__.vals_i("N_kinetic_parameters")[
          (1 - 1)];
      context__.validate_dims("data initialization","N_reaction","int",
          context__.to_vec());
      
      current_statement__ = 18;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      context__.validate_dims("data initialization","N_enzyme","int",
          context__.to_vec());
      
      current_statement__ = 19;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      context__.validate_dims("data initialization","N_experiment","int",
          context__.to_vec());
      
      current_statement__ = 20;
      N_experiment = context__.vals_i("N_experiment")[(1 - 1)];
      context__.validate_dims("data initialization","N_flux_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 21;
      N_flux_measurement = context__.vals_i("N_flux_measurement")[(1 - 1)];
      context__.validate_dims("data initialization","N_enzyme_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 22;
      N_enzyme_measurement = context__.vals_i("N_enzyme_measurement")[
          (1 - 1)];
      context__.validate_dims("data initialization","N_conc_measurement",
          "int",context__.to_vec());
      
      current_statement__ = 23;
      N_conc_measurement = context__.vals_i("N_conc_measurement")[(1 - 1)];
      context__.validate_dims("data initialization","N_metabolite","int",
          context__.to_vec());
      
      current_statement__ = 24;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      context__.validate_dims("data initialization","N_timepoint","int",
          context__.to_vec());
      
      current_statement__ = 25;
      N_timepoint = context__.vals_i("N_timepoint")[(1 - 1)];
      current_statement__ = 26;
      validate_non_negative_index("unbalanced_mic_ix", "N_unbalanced",
                                  N_unbalanced);
      context__.validate_dims("data initialization","unbalanced_mic_ix",
          "int",context__.to_vec(N_unbalanced));
      unbalanced_mic_ix = std::vector<int>(N_unbalanced, 0);
      
      current_statement__ = 26;
      assign(unbalanced_mic_ix, nil_index_list(),
        context__.vals_i("unbalanced_mic_ix"),
        "assigning variable unbalanced_mic_ix");
      current_statement__ = 27;
      validate_non_negative_index("balanced_mic_ix",
                                  "(N_mic - N_unbalanced)",
                                  (N_mic - N_unbalanced));
      context__.validate_dims("data initialization","balanced_mic_ix","int",
          context__.to_vec((N_mic - N_unbalanced)));
      balanced_mic_ix = std::vector<int>((N_mic - N_unbalanced), 0);
      
      current_statement__ = 27;
      assign(balanced_mic_ix, nil_index_list(),
        context__.vals_i("balanced_mic_ix"),
        "assigning variable balanced_mic_ix");
      current_statement__ = 28;
      validate_non_negative_index("kinetic_parameters",
                                  "N_kinetic_parameters",
                                  N_kinetic_parameters);
      context__.validate_dims("data initialization","kinetic_parameters",
          "double",context__.to_vec(N_kinetic_parameters));
      kinetic_parameters = Eigen::Matrix<double, -1, 1>(N_kinetic_parameters);
      
      {
        std::vector<local_scalar_t__> kinetic_parameters_flat__;
        current_statement__ = 28;
        assign(kinetic_parameters_flat__, nil_index_list(),
          context__.vals_r("kinetic_parameters"),
          "assigning variable kinetic_parameters_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (size_t sym1__ = 1; sym1__ <= N_kinetic_parameters; ++sym1__) {
          current_statement__ = 28;
          assign(kinetic_parameters,
            cons_list(index_uni(sym1__), nil_index_list()),
            kinetic_parameters_flat__[(pos__ - 1)],
            "assigning variable kinetic_parameters");
          current_statement__ = 28;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 29;
      validate_non_negative_index("enzyme_concentration", "N_experiment",
                                  N_experiment);
      current_statement__ = 29;
      validate_non_negative_index("enzyme_concentration", "N_enzyme",
                                  N_enzyme);
      context__.validate_dims("data initialization","enzyme_concentration",
          "double",context__.to_vec(N_experiment, N_enzyme));
      enzyme_concentration = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme));
      
      {
        std::vector<local_scalar_t__> enzyme_concentration_flat__;
        current_statement__ = 29;
        assign(enzyme_concentration_flat__, nil_index_list(),
          context__.vals_r("enzyme_concentration"),
          "assigning variable enzyme_concentration_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 29;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 29;
            assign(enzyme_concentration,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              enzyme_concentration_flat__[(pos__ - 1)],
              "assigning variable enzyme_concentration");
            current_statement__ = 29;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 30;
      validate_non_negative_index("conc_sim", "N_experiment", N_experiment);
      current_statement__ = 30;
      validate_non_negative_index("conc_sim", "N_mic", N_mic);
      context__.validate_dims("data initialization","conc_sim","double",
          context__.to_vec(N_experiment, N_mic));
      conc_sim = std::vector<std::vector<double>>(N_experiment, std::vector<double>(N_mic, 0));
      
      {
        std::vector<local_scalar_t__> conc_sim_flat__;
        current_statement__ = 30;
        assign(conc_sim_flat__, nil_index_list(),
          context__.vals_r("conc_sim"), "assigning variable conc_sim_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 30;
          for (size_t sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 30;
            assign(conc_sim,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              conc_sim_flat__[(pos__ - 1)], "assigning variable conc_sim");
            current_statement__ = 30;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 31;
      validate_non_negative_index("delta_g", "N_enzyme", N_enzyme);
      context__.validate_dims("data initialization","delta_g","double",
          context__.to_vec(N_enzyme));
      delta_g = Eigen::Matrix<double, -1, 1>(N_enzyme);
      
      {
        std::vector<local_scalar_t__> delta_g_flat__;
        current_statement__ = 31;
        assign(delta_g_flat__, nil_index_list(), context__.vals_r("delta_g"),
          "assigning variable delta_g_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 31;
          assign(delta_g, cons_list(index_uni(sym1__), nil_index_list()),
            delta_g_flat__[(pos__ - 1)], "assigning variable delta_g");
          current_statement__ = 31;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 32;
      validate_non_negative_index("timepoints", "N_timepoint", N_timepoint);
      context__.validate_dims("data initialization","timepoints","double",
          context__.to_vec(N_timepoint));
      timepoints = std::vector<double>(N_timepoint, 0);
      
      current_statement__ = 32;
      assign(timepoints, nil_index_list(), context__.vals_r("timepoints"),
        "assigning variable timepoints");
      current_statement__ = 33;
      validate_non_negative_index("xr", "0", 0);
      xr = std::vector<double>(0, 0);
      
      current_statement__ = 34;
      validate_non_negative_index("xi", "0", 0);
      xi = std::vector<int>(0, 0);
      
      
      current_statement__ = 35;
      minus_RT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 35;
      minus_RT = (-0.008314 * 298.15);
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "N_unbalanced", N_unbalanced, 1);
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "N_kinetic_parameters",
                             N_kinetic_parameters, 1);
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "N_reaction", N_reaction, 1);
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "N_experiment", N_experiment, 1);
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "N_flux_measurement",
                             N_flux_measurement, 1);
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N_enzyme_measurement",
                             N_enzyme_measurement, 1);
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "N_conc_measurement",
                             N_conc_measurement, 1);
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "N_metabolite", N_metabolite, 1);
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "N_timepoint", N_timepoint, 1);
      current_statement__ = 26;
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                               unbalanced_mic_ix[(sym1__ - 1)], 1);}
      current_statement__ = 26;
      for (size_t sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_less_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                            unbalanced_mic_ix[(sym1__ - 1)], N_mic);}
      current_statement__ = 27;
      for (size_t sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "balanced_mic_ix[sym1__]",
                               balanced_mic_ix[(sym1__ - 1)], 1);}
      current_statement__ = 27;
      for (size_t sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_less_or_equal(function__, "balanced_mic_ix[sym1__]",
                            balanced_mic_ix[(sym1__ - 1)], N_mic);}
      current_statement__ = 28;
      current_statement__ = 28;
      check_greater_or_equal(function__, "kinetic_parameters",
                             kinetic_parameters, 0);
      current_statement__ = 29;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "enzyme_concentration[sym1__]",
                               enzyme_concentration[(sym1__ - 1)], 0);}
      current_statement__ = 30;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 30;
        for (size_t sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 30;
          current_statement__ = 30;
          check_greater_or_equal(function__, "conc_sim[sym1__, sym2__]",
                                 conc_sim[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 32;
      for (size_t sym1__ = 1; sym1__ <= N_timepoint; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "timepoints[sym1__]",
                               timepoints[(sym1__ - 1)], 0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "validate_model_yeast_ethanol_fx_no_split_compartment_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ alpha;
      
      current_statement__ = 1;
      alpha = in__.scalar();
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_experiment", N_experiment);
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_timepoint", N_timepoint);
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_mic", N_mic);
      std::vector<std::vector<std::vector<local_scalar_t__>>> conc;
      conc = std::vector<std::vector<std::vector<local_scalar_t__>>>(N_experiment, std::vector<std::vector<local_scalar_t__>>(N_timepoint, std::vector<local_scalar_t__>(N_mic, 0)));
      
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_experiment", N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_timepoint", N_timepoint);
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_reaction", N_reaction);
      std::vector<std::vector<std::vector<local_scalar_t__>>> flux;
      flux = std::vector<std::vector<std::vector<local_scalar_t__>>>(N_experiment, std::vector<std::vector<local_scalar_t__>>(N_timepoint, std::vector<local_scalar_t__>(N_reaction, 0)));
      
      local_scalar_t__ initial_time;
      
      current_statement__ = 4;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      initial_time = 0;
      current_statement__ = 13;
      for (size_t e = 1; e <= N_experiment; ++e) {
        current_statement__ = 5;
        validate_non_negative_index("keq", "N_enzyme", N_enzyme);
        Eigen::Matrix<local_scalar_t__, -1, 1> keq;
        keq = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
        
        current_statement__ = 5;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 5;
          assign(keq, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable keq");}
        current_statement__ = 5;
        assign(keq, nil_index_list(),
          stan::math::exp(divide(delta_g, minus_RT)),
          "assigning variable keq");
        current_statement__ = 6;
        validate_non_negative_index("parameter",
                                    "(((N_unbalanced + N_enzyme) + N_enzyme) + N_kinetic_parameters)",
                                    (((N_unbalanced + N_enzyme) + N_enzyme) +
                                      N_kinetic_parameters));
        Eigen::Matrix<local_scalar_t__, -1, 1> parameter;
        parameter = Eigen::Matrix<local_scalar_t__, -1, 1>((((N_unbalanced +
                                                               N_enzyme) +
                                                              N_enzyme) +
                                                             N_kinetic_parameters));
        
        current_statement__ = 6;
        for (size_t sym1__ = 1;
             sym1__ <= (((N_unbalanced + N_enzyme) + N_enzyme) +
                         N_kinetic_parameters); ++sym1__) {
          current_statement__ = 6;
          assign(parameter, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable parameter");}
        current_statement__ = 6;
        assign(parameter, nil_index_list(),
          append_row(
            append_row(
              append_row(
                to_vector(
                  rvalue(conc_sim,
                    cons_list(index_uni(e),
                      cons_list(index_multi(unbalanced_mic_ix),
                        nil_index_list())), "conc_sim")),
                enzyme_concentration[(e - 1)]), keq), kinetic_parameters),
          "assigning variable parameter");
        current_statement__ = 7;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_omni(),
              cons_list(index_multi(unbalanced_mic_ix), nil_index_list()))),
          rep_array(
            rvalue(conc_sim,
              cons_list(index_uni(e),
                cons_list(index_multi(unbalanced_mic_ix), nil_index_list())),
              "conc_sim"), N_timepoint), "assigning variable conc");
        current_statement__ = 8;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_omni(),
              cons_list(index_multi(balanced_mic_ix), nil_index_list()))),
          integrate_ode_bdf(ode_func_functor__(),
            rvalue(conc_sim,
              cons_list(index_uni(e),
                cons_list(index_multi(balanced_mic_ix), nil_index_list())),
              "conc_sim"), initial_time, timepoints, to_array_1d(parameter),
            xr, rep_array(0, 1), pstream__, 1e-9, 1e-12, 1e5),
          "assigning variable conc");
        current_statement__ = 11;
        for (size_t t = 1; t <= N_timepoint; ++t) {
          current_statement__ = 9;
          assign(flux,
            cons_list(index_uni(e),
              cons_list(index_uni(t),
                cons_list(index_omni(), nil_index_list()))),
            to_array_1d(
              get_fluxes(
                rvalue(conc,
                  cons_list(index_uni(e),
                    cons_list(index_uni(t),
                      cons_list(index_multi(balanced_mic_ix),
                        nil_index_list()))), "conc"),
                to_array_1d(parameter), pstream__)),
            "assigning variable flux");}}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 2;
        for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
          current_statement__ = 2;
          for (size_t sym3__ = 1; sym3__ <= N_mic; ++sym3__) {
            current_statement__ = 2;
            current_statement__ = 2;
            check_greater_or_equal(function__,
                                   "conc[sym1__, sym2__, sym3__]",
                                   conc[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)], 0);}
        }}
      {
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<false>(0, alpha, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "validate_model_yeast_ethanol_fx_no_split_compartment_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double alpha;
      
      current_statement__ = 1;
      alpha = in__.scalar();
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_experiment", N_experiment);
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_timepoint", N_timepoint);
      current_statement__ = 2;
      validate_non_negative_index("conc", "N_mic", N_mic);
      std::vector<std::vector<std::vector<double>>> conc;
      conc = std::vector<std::vector<std::vector<double>>>(N_experiment, std::vector<std::vector<double>>(N_timepoint, std::vector<double>(N_mic, 0)));
      
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_experiment", N_experiment);
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_timepoint", N_timepoint);
      current_statement__ = 3;
      validate_non_negative_index("flux", "N_reaction", N_reaction);
      std::vector<std::vector<std::vector<double>>> flux;
      flux = std::vector<std::vector<std::vector<double>>>(N_experiment, std::vector<std::vector<double>>(N_timepoint, std::vector<double>(N_reaction, 0)));
      
      double initial_time;
      
      current_statement__ = 4;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      vars__.push_back(alpha);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      initial_time = 0;
      current_statement__ = 13;
      for (size_t e = 1; e <= N_experiment; ++e) {
        current_statement__ = 5;
        validate_non_negative_index("keq", "N_enzyme", N_enzyme);
        Eigen::Matrix<double, -1, 1> keq;
        keq = Eigen::Matrix<double, -1, 1>(N_enzyme);
        
        current_statement__ = 5;
        for (size_t sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 5;
          assign(keq, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable keq");}
        current_statement__ = 5;
        assign(keq, nil_index_list(),
          stan::math::exp(divide(delta_g, minus_RT)),
          "assigning variable keq");
        current_statement__ = 6;
        validate_non_negative_index("parameter",
                                    "(((N_unbalanced + N_enzyme) + N_enzyme) + N_kinetic_parameters)",
                                    (((N_unbalanced + N_enzyme) + N_enzyme) +
                                      N_kinetic_parameters));
        Eigen::Matrix<double, -1, 1> parameter;
        parameter = Eigen::Matrix<double, -1, 1>((((N_unbalanced + N_enzyme)
                                                    + N_enzyme) +
                                                   N_kinetic_parameters));
        
        current_statement__ = 6;
        for (size_t sym1__ = 1;
             sym1__ <= (((N_unbalanced + N_enzyme) + N_enzyme) +
                         N_kinetic_parameters); ++sym1__) {
          current_statement__ = 6;
          assign(parameter, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable parameter");}
        current_statement__ = 6;
        assign(parameter, nil_index_list(),
          append_row(
            append_row(
              append_row(
                to_vector(
                  rvalue(conc_sim,
                    cons_list(index_uni(e),
                      cons_list(index_multi(unbalanced_mic_ix),
                        nil_index_list())), "conc_sim")),
                enzyme_concentration[(e - 1)]), keq), kinetic_parameters),
          "assigning variable parameter");
        current_statement__ = 7;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_omni(),
              cons_list(index_multi(unbalanced_mic_ix), nil_index_list()))),
          rep_array(
            rvalue(conc_sim,
              cons_list(index_uni(e),
                cons_list(index_multi(unbalanced_mic_ix), nil_index_list())),
              "conc_sim"), N_timepoint), "assigning variable conc");
        current_statement__ = 8;
        assign(conc,
          cons_list(index_uni(e),
            cons_list(index_omni(),
              cons_list(index_multi(balanced_mic_ix), nil_index_list()))),
          integrate_ode_bdf(ode_func_functor__(),
            rvalue(conc_sim,
              cons_list(index_uni(e),
                cons_list(index_multi(balanced_mic_ix), nil_index_list())),
              "conc_sim"), initial_time, timepoints, to_array_1d(parameter),
            xr, rep_array(0, 1), pstream__, 1e-9, 1e-12, 1e5),
          "assigning variable conc");
        current_statement__ = 11;
        for (size_t t = 1; t <= N_timepoint; ++t) {
          current_statement__ = 9;
          assign(flux,
            cons_list(index_uni(e),
              cons_list(index_uni(t),
                cons_list(index_omni(), nil_index_list()))),
            to_array_1d(
              get_fluxes(
                rvalue(conc,
                  cons_list(index_uni(e),
                    cons_list(index_uni(t),
                      cons_list(index_multi(balanced_mic_ix),
                        nil_index_list()))), "conc"),
                to_array_1d(parameter), pstream__)),
            "assigning variable flux");}}
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
          for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
            vars__.push_back(conc[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }}}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
          for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
            vars__.push_back(flux[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }}}
      vars__.push_back(initial_time);
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double alpha;
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      vars__.push_back(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("alpha");
    names__.push_back("conc");
    names__.push_back("flux");
    names__.push_back("initial_time");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_timepoint);
    
    dims__.push_back(N_mic);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_experiment);
    
    dims__.push_back(N_timepoint);
    
    dims__.push_back(N_reaction);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
            {
              for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
                {
                  param_names__.push_back(std::string() + "conc" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
            {
              for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
                {
                  param_names__.push_back(std::string() + "flux" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      param_names__.push_back(std::string() + "initial_time");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
            {
              for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
                {
                  param_names__.push_back(std::string() + "conc" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N_timepoint; ++sym2__) {
            {
              for (size_t sym3__ = 1; sym3__ <= N_experiment; ++sym3__) {
                {
                  param_names__.push_back(std::string() + "flux" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      param_names__.push_back(std::string() + "initial_time");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_timepoint << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_mic << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_timepoint << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_reaction << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"initial_time\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_timepoint << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_mic << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" << N_experiment << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_timepoint << ",\"element_type\":{\"name\":\"array\",\"length\":" << N_reaction << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"initial_time\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef validate_model_yeast_ethanol_fx_no_split_compartment_model_namespace::validate_model_yeast_ethanol_fx_no_split_compartment_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


